{"version":3,"file":"marked.esm-3jjDnH0B.js","sources":["../../node_modules/.pnpm/marked@14.1.2/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v14.1.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text),\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^(?: {1,4}| {0,3}\\t)/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (/^ {0,3}>/.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n                    .replace(/^ {0,3}>[ \\t]?/gm, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens[tokens.length - 1];\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && /^[ \\t]*$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    const htmlBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}<[a-z].*>`, 'i');\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(/\\t/g, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(/\\t/g, '    ').search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n[ \\t]*\\n[ \\t]*$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n            list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1]),\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(/^\\S*/)?.[0];\n        const code = text.replace(/\\n$/, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(langString)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${text}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n"],"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","escapeTest","escapeReplace","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","caret","edit","regex","opt","obj","name","val","valSource","getRegex","RegExp","cleanUrl","href","encodeURI","noopTest","exec","splitCells","tableRow","count","cells","row","match","offset","str","escaped","curr","r","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","rules","space","src","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","newText","oldToken","newToken","substring","list","bull","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","ischecked","endEarly","itemContents","line","t","repeat","nextLine","blankLine","indent","trimStart","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","nextLineWithoutTabs","rawLine","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","toLowerCase","table","headers","aligns","rows","item","header","align","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","findClosingBracket","b","indexOf","level","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","emStrongLDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","_a","prevCapZero","_backpedal","inlineText","bullet","_paragraph","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","_punctuation","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","blockSkip","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","constructor","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","cutSrc","n","extTokenizer","call","startBlock","tempStart","startIndex","Infinity","tempSrc","forEach","e","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","parser","langString","parse","parseInline","body","j","listitem","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","ret","genericToken","textToken","_Hooks","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","__publicField","passThroughHooks","Set","Marked","args","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","use","callback","_b","values","concat","tableToken","childTokens","flat","opts","pack","ext","prevRenderer","apply","extLevel","prop","rendererFunc","tokenizerFunc","prevTokenizer","hooksFunc","prevHook","has","arg","Promise","resolve","then","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults"],"mappings":"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","x_google_ignoreList":[0]}