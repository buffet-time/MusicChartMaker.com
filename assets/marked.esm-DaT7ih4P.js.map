{"version":3,"file":"marked.esm-DaT7ih4P.js","sources":["../../node_modules/.pnpm/marked@13.0.2/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v13.0.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n')\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (/^ {0,3}>/.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n                    .replace(/^ {0,3}>[ \\t]?/gm, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens[tokens.length - 1];\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n            list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i]\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i]\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(/^\\S*/)?.[0];\n        const code = text.replace(/\\n$/, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(langString)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' '\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${text}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body }]\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    let rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        if (!pack.useNewRenderer) {\n                            // TODO: Remove this in next major version\n                            rendererFunc = this.#convertRendererFunction(rendererFunc, rendererProp, renderer);\n                        }\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    // TODO: Remove this in next major release\n    #convertRendererFunction(func, prop, renderer) {\n        switch (prop) {\n            case 'heading':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, renderer.parser.parseInline(token.tokens), token.depth, unescape(renderer.parser.parseInline(token.tokens, renderer.parser.textRenderer)));\n                };\n            case 'code':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text, token.lang, !!token.escaped);\n                };\n            case 'table':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < token.header.length; j++) {\n                        cell += this.tablecell({\n                            text: token.header[j].text,\n                            tokens: token.header[j].tokens,\n                            header: true,\n                            align: token.align[j]\n                        });\n                    }\n                    header += this.tablerow({ text: cell });\n                    let body = '';\n                    for (let j = 0; j < token.rows.length; j++) {\n                        const row = token.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.tablecell({\n                                text: row[k].text,\n                                tokens: row[k].tokens,\n                                header: false,\n                                align: token.align[k]\n                            });\n                        }\n                        body += this.tablerow({ text: cell });\n                    }\n                    return func.call(this, header, body);\n                };\n            case 'blockquote':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    const body = this.parser.parse(token.tokens);\n                    return func.call(this, body);\n                };\n            case 'list':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    const ordered = token.ordered;\n                    const start = token.start;\n                    const loose = token.loose;\n                    let body = '';\n                    for (let j = 0; j < token.items.length; j++) {\n                        const item = token.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.checkbox({ checked: !!checked });\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parser.parse(item.tokens, loose);\n                        body += this.listitem({\n                            type: 'list_item',\n                            raw: itemBody,\n                            text: itemBody,\n                            task,\n                            checked: !!checked,\n                            loose,\n                            tokens: item.tokens\n                        });\n                    }\n                    return func.call(this, body, ordered, start);\n                };\n            case 'html':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text, token.block);\n                };\n            case 'paragraph':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'escape':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            case 'link':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.href, token.title, this.parser.parseInline(token.tokens));\n                };\n            case 'image':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.href, token.title, token.text);\n                };\n            case 'strong':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'em':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'codespan':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            case 'del':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'text':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            // do nothing\n        }\n        return func;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n"],"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","e","ch","escape$1","html","encode","test","replace","unescapeTest","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","noopTest","exec","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","r","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","rules","space","src","block","newline","code","codeBlockStyle","fences","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","n","join","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","newText","oldToken","newToken","substring","list","bull","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","ischecked","endEarly","itemContents","line","repeat","t","nextLine","blankLine","indent","trimStart","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","toLowerCase","table","headers","aligns","rows","item","header","align","row","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","findClosingBracket","b","indexOf","level","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","emStrongLDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","_a","prevCapZero","_backpedal","inlineText","bullet","_paragraph","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","_punctuation","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","blockSkip","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","constructor","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","cutSrc","_","leading","tabs","extTokenizer","call","startBlock","tempStart","startIndex","Infinity","tempSrc","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","parser","langString","parse","parseInline","body","j","listitem","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","ret","genericToken","textToken","_Hooks","preprocess","markdown","postprocess","processAllTokens","__publicField","passThroughHooks","Set","_el_instances","t_fn","e_fn","n_fn","Marked","defaults","args","__privateAdd","setOptions","__privateMethod","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","use","callback","_b","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","useNewRenderer","tokenizerFunc","prevTokenizer","hooksFunc","prevHook","has","arg","Promise","resolve","then","packWalktokens","func","String","fromCharCode","parseInt","arguments","origOpt","warn","throwError","prototype","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults"],"mappings":"sZAcA,SAASA,GAAAA,CACL,MAAO,CACHC,MAAO,GACPC,OAAQ,GACRC,WAAY,KACZC,IAAK,GACLC,MAAO,KACPC,SAAU,GACVC,SAAU,KACVC,OAAQ,GACRC,UAAW,KACXC,WAAY,IACpB,CACA,CACG,IAACC,EAAYX,EAAAA,EAQVY,GAAa,UACbC,GAAoBC,OAAOF,GAAWG,OAAQ,GAC9CC,EAAAA,GAAqB,oDACrBC,GAA4BH,OAAOE,GAAmBD,OAAQ,GAC9DG,EAAAA,GAAqB,CACvB,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,SACL,IAAK,OACT,EACMC,GAAuBC,GAAQF,GAAmBG,CAAG,EAC3D,SAASC,EAASC,EAAMC,EACpB,CAAA,GAAIA,GACA,GAAIZ,GAAWa,KAAKF,CAChB,EAAA,OAAOA,EAAKG,QAAQb,GAAeM,EAAAA,UAInCH,GAAmBS,KAAKF,CAAAA,EACxB,OAAOA,EAAKG,QAAQT,GAAuBE,EAAAA,EAGnD,OAAOI,CACX,CACA,IAAMI,GAAe,6CAefC,GAAQ,eACd,SAASC,EAAKC,EAAOC,EACjB,CAAA,IAAIhB,EAAS,OAAOe,GAAP,SAA4BA,EAAQA,EAAMf,OACvDgB,EAAMA,GAAO,GACb,IAAMC,EAAM,CACRN,QAAS,CAACO,EAAMC,IACZ,CAAA,IAAIC,EAAY,OAAOD,GAAQ,SAAWA,EAAMA,EAAInB,OAGpD,OAFAoB,EAAYA,EAAUT,QAAQE,GAAO,IACrCb,EAAAA,EAASA,EAAOW,QAAQO,EAAME,CACvBH,EAAAA,CACV,EACDI,SAAU,IACC,IAAItB,OAAOC,EAAQgB,CAAAA,CAEtC,EACI,OAAOC,CACX,CACA,SAASK,GAASC,EAAI,CAClB,GAAI,CACAA,EAAOC,UAAUD,CAAAA,EAAMZ,QAAQ,OAAQ,GAAA,CAC1C,MACS,CACN,OAAO,IACV,CACD,OAAOY,CACX,CACA,IAAME,EAAW,CAAEC,KAAM,IAAM,MAC/B,SAASC,GAAWC,EAAUC,EAAK,CAG/B,IAcIC,EAdQF,EAASjB,QAAQ,MAAO,CAACoB,EAAOC,EAAQC,IAAAA,CAChD,IAAIC,EAAU,GACVC,EAAOH,EACX,KAAO,EAAEG,GAAQ,GAAKF,EAAIE,CAAAA,IAAU,MAChCD,EAAU,CAACA,EAAAA,OACfE,EAGW,IAIA,IAEd,CAAA,EAAeC,MAAM,KAClBC,EAAAA,EAAI,EAQR,GANKR,EAAM,CAAE,EAACS,KACVT,GAAAA,EAAMU,MAAK,EAEXV,EAAMW,OAAS,GAAK,CAACX,EAAMA,EAAMW,OAAS,GAAGF,KAC7CT,GAAAA,EAAMY,IAAG,EAETb,EACA,GAAIC,EAAMW,OAASZ,EACfC,EAAMa,OAAOd,CAGb,MAAA,MAAOC,EAAMW,OAASZ,GAClBC,EAAMc,KAAK,EAAA,EAGvB,KAAON,EAAIR,EAAMW,OAAQH,IAErBR,EAAMQ,CAAAA,EAAKR,EAAMQ,CAAAA,EAAGC,KAAO5B,EAAAA,QAAQ,QAAS,KAEhD,OAAOmB,CACX,CASA,SAASe,EAAMZ,EAAKa,EAAGC,EACnB,CAAA,IAAMC,EAAIf,EAAIQ,OACd,GAAIO,IAAAA,EACA,MAAO,GAGX,IAAIC,EAAU,EAEd,KAAOA,EAAUD,GAAG,CAChB,IAAME,EAAWjB,EAAIkB,OAAOH,EAAIC,EAAU,CAC1C,EAAA,GAAIC,IAAaJ,GAAMC,EAGlB,GAAIG,IAAaJ,GAAKC,EACvBE,QAGA,YANAA,GAQP,CACD,OAAOhB,EAAImB,MAAM,EAAGJ,EAAIC,CAC5B,CAAA,CAuBA,SAASI,GAAWC,EAAKC,EAAMC,EAAKC,EAChC,CAAA,IAAMlC,EAAOgC,EAAKhC,KACZmC,EAAQH,EAAKG,MAAQnD,EAASgD,EAAKG,KAAK,EAAI,KAC5CC,EAAOL,EAAI,CAAA,EAAG3C,QAAQ,cAAe,MAC3C,GAAI2C,EAAI,CAAA,EAAGH,OAAO,CAAA,IAAO,IAAK,CAC1BM,EAAMG,MAAMC,OAAS,GACrB,IAAMC,EAAQ,CACVC,KAAM,OACNP,IAAAA,EACAjC,KAAAA,EACAmC,MAAAA,EACAC,KAAAA,EACAK,OAAQP,EAAMQ,aAAaN,CAAAA,CACvC,EAEQ,OADAF,EAAMG,MAAMC,OAAS,GACdC,CACV,CACD,MAAO,CACHC,KAAM,QACNP,IAAAA,EACAjC,KAAAA,EACAmC,MAAAA,EACAC,KAAMpD,EAASoD,EACvB,CACA,CAyBA,MAAMO,CAAAA,CAIUC,YAAAA,EAAS,CAHrBA,EAAAA,gBACAC,EAAAA,cACAX,EAAAA,cAEI,KAAKU,QAAUA,GAAWvE,CAC7B,CACDyE,MAAMC,EAAK,CACP,IAAMhB,EAAM,KAAKc,MAAMG,MAAMC,QAAQ9C,KAAK4C,CAAAA,EAC1C,GAAIhB,GAAOA,EAAI,GAAGb,OAAS,EACvB,MAAO,CACHsB,KAAM,QACNP,IAAKF,EAAI,CAAA,CAAE,CAGtB,CACDmB,KAAKH,EAAK,CACN,IAAMhB,EAAM,KAAKc,MAAMG,MAAME,KAAK/C,KAAK4C,CAAAA,EACvC,GAAIhB,EAAK,CACL,IAAMK,EAAOL,EAAI,CAAA,EAAG3C,QAAQ,YAAa,IACzC,MAAO,CACHoD,KAAM,OACNP,IAAKF,EAAI,CAAA,EACToB,eAAgB,WAChBf,KAAM,KAAMQ,QAAQ5E,SAEdoE,EADAd,EAAMc,EAAM;AAAA,CAAA,CAElC,CACS,CACJ,CACDgB,OAAOL,EAAK,CACR,IAAMhB,EAAM,KAAKc,MAAMG,MAAMI,OAAOjD,KAAK4C,CACzC,EAAA,GAAIhB,EAAK,CACL,IAAME,EAAMF,EAAI,CAAA,EACVK,EAAOiB,SA1DOpB,EAAKG,EAAI,CACrC,IAAMkB,EAAoBrB,EAAIzB,MAAM,eACpC,EAAA,GAAI8C,IAAAA,KACA,OAAOlB,EAEX,IAAMmB,EAAeD,EAAkB,CAAE,EACzC,OAAOlB,EACFtB,MAAM;AAAA,CACN0C,EAAAA,IAAIC,GAAAA,CACL,IAAMC,EAAoBD,EAAKjD,MAAM,MACrC,EAAA,GAAIkD,IAAAA,KACA,OAAOD,EAEX,GAAM,CAACE,CAAAA,EAAgBD,EAAAA,OACvBE,EAAiB1C,QAAUqC,EAAarC,OAC7BuC,EAAK5B,MAAM0B,EAAarC,MAAM,EAElCuC,CACf,CAAA,EACSI,KAAK;AAAA,EACd,EAsCgD5B,EAAKF,EAAI,CAAE,GAAI,EACnD,EAAA,MAAO,CACHS,KAAM,OACNP,IAAAA,EACA6B,KAAM/B,EAAI,CAAA,EAAKA,EAAI,CAAA,EAAGf,KAAO5B,EAAAA,QAAQ,KAAKyD,MAAMkB,OAAOC,eAAgB,IAAQjC,EAAAA,EAAI,CAAA,EACnFK,KAAAA,CAChB,CACS,CACJ,CACD6B,QAAQlB,EAAK,CACT,IAAMhB,EAAM,KAAKc,MAAMG,MAAMiB,QAAQ9D,KAAK4C,CAC1C,EAAA,GAAIhB,EAAK,CACL,IAAIK,EAAOL,EAAI,CAAE,EAACf,KAAI,EAEtB,GAAI,KAAK7B,KAAKiD,CAAAA,EAAO,CACjB,IAAM8B,EAAU5C,EAAMc,EAAM,GAAA,GACxB,KAAKQ,QAAQ5E,UAGR,CAACkG,GAAW,KAAK/E,KAAK+E,CAAO,KAElC9B,EAAO8B,EAAQlD,KAAI,EAE1B,CACD,MAAO,CACHwB,KAAM,UACNP,IAAKF,EAAI,CAAA,EACToC,MAAOpC,EAAI,CAAA,EAAGb,OACdkB,KAAAA,EACAK,OAAQ,KAAKP,MAAM6B,OAAO3B,EAC1C,CACS,CACJ,CACDgC,GAAGrB,EAAK,CACJ,IAAMhB,EAAM,KAAKc,MAAMG,MAAMoB,GAAGjE,KAAK4C,CACrC,EAAA,GAAIhB,EACA,MAAO,CACHS,KAAM,KACNP,IAAKX,EAAMS,EAAI,CAAE,EAAE;AAAA,CACnC,CAAA,CAEK,CACDsC,WAAWtB,EAAK,CACZ,IAAMhB,EAAM,KAAKc,MAAMG,MAAMqB,WAAWlE,KAAK4C,CAC7C,EAAA,GAAIhB,EAAK,CACL,IAAIuC,EAAQhD,EAAMS,EAAI,CAAE,EAAE;AAAA,CAAMjB,EAAAA,MAAM;AAAA,CAAA,EAClCmB,EAAM,GACNG,EAAO,GACLK,EAAS,CAAA,EACf,KAAO6B,EAAMpD,OAAS,GAAG,CACrB,IAEIH,EAFAwD,EAAe,GACbC,EAAe,CAAE,EAEvB,IAAKzD,EAAI,EAAGA,EAAIuD,EAAMpD,OAAQH,IAE1B,GAAI,WAAW5B,KAAKmF,EAAMvD,CAAAA,CAAE,EACxByD,EAAanD,KAAKiD,EAAMvD,CAAAA,CAAE,EAC1BwD,EAAe,OAEd,IAAKA,EAIN,MAHAC,EAAanD,KAAKiD,EAAMvD,CAAAA,CAAE,EAMlCuD,EAAQA,EAAMzC,MAAMd,CAAAA,EACpB,IAAM0D,EAAaD,EAAaX,KAAK;AAAA,CAAA,EAC/Ba,EAAcD,EAEfrF,QAAQ,iCAAkC;AAAA,OAAA,EAC1CA,QAAQ,mBAAoB,EAAA,EACjC6C,EAAMA,EAAM,GAAGA,CAAI;AAAA,EAAIwC,CAAAA,GAAeA,EACtCrC,EAAOA,EAAO,GAAGA,CAAK;AAAA,EAAIsC,IAAgBA,EAG1C,IAAMC,EAAM,KAAKzC,MAAMG,MAAMsC,IAK7B,GAJA,KAAKzC,MAAMG,MAAMsC,IAAM,GACvB,KAAKzC,MAAM0C,YAAYF,EAAajC,EAAQ,EAC5C,EAAA,KAAKP,MAAMG,MAAMsC,IAAMA,EAEnBL,EAAMpD,SAANoD,EACA,MAEJ,IAAMO,EAAYpC,EAAOA,EAAOvB,OAAS,CAAE,EAC3C,IAAI2D,GAAAA,YAAAA,EAAWrC,QAAS,OAEpB,MAEC,IAAIqC,GAAAA,YAAAA,EAAWrC,QAAS,aAAc,CAGvC,IAAMsC,EAAUC,EAAS9C,IAAM;AAAA,EAAOqC,EAAMT,KAAK;AAAA,CAAA,EAC3CmB,EAAW,KAAKX,WAAWS,CACjCrC,EAAAA,EAAOA,EAAOvB,OAAS,GAAK8D,EAC5B/C,EAAMA,EAAIgD,UAAU,EAAGhD,EAAIf,OAAS6D,EAAS9C,IAAIf,MAAM,EAAI8D,EAAS/C,IACpEG,EAAOA,EAAK6C,UAAU,EAAG7C,EAAKlB,OALb2D,EAK+BzC,KAAKlB,MAAM,EAAI8D,EAAS5C,KACxE,KACH,CACI,IAAIyC,GAAAA,YAAAA,EAAWrC,QAAS,OAAQ,CAGjC,IAAMsC,EAAUC,EAAS9C,IAAM;AAAA,EAAOqC,EAAMT,KAAK;AAAA,CAC3CmB,EAAAA,EAAW,KAAKE,KAAKJ,CAAAA,EAC3BrC,EAAOA,EAAOvB,OAAS,GAAK8D,EAC5B/C,EAAMA,EAAIgD,UAAU,EAAGhD,EAAIf,OAAS2D,EAAU5C,IAAIf,MAAM,EAAI8D,EAAS/C,IACrEG,EAAOA,EAAK6C,UAAU,EAAG7C,EAAKlB,OALb2D,EAK+B5C,IAAIf,MAAM,EAAI8D,EAAS/C,IACvEqC,EAAQQ,EAAQG,UAAUxC,EAAOA,EAAOvB,OAAS,CAAA,EAAGe,IAAIf,MAAM,EAAEJ,MAAM;AAAA,CAAA,EACtE,QACH,CACJ,CACD,MAAO,CACH0B,KAAM,aACNP,IAAAA,EACAQ,OAAAA,EACAL,KAAAA,CAChB,CACS,CACJ,CACD8C,KAAKnC,EAAK,CACN,IAAIhB,EAAM,KAAKc,MAAMG,MAAMkC,KAAK/E,KAAK4C,CAAAA,EACrC,GAAIhB,EAAK,CACL,IAAIoD,EAAOpD,EAAI,CAAA,EAAGf,OACZoE,EAAYD,EAAKjE,OAAS,EAC1BgE,EAAO,CACT1C,KAAM,OACNP,IAAK,GACLoD,QAASD,EACTE,MAAOF,EAAY,CAACD,EAAKtD,MAAM,EAAG,EAAM,EAAA,GACxC0D,MAAO,GACPC,MAAO,CAAE,CACzB,EACYL,EAAOC,EAAY,aAAaD,EAAKtD,MAAM,EAAA,CAAA,GAAQ,KAAKsD,IACpD,KAAKvC,QAAQ5E,WACbmH,EAAOC,EAAYD,EAAO,SAG9B,IAAMM,EAAgBjH,OAAO,WAAW2G,CAAK,8BAA8B,EACvEO,EAAoB,GAExB,KAAO3C,GAAK,CACR,IAuGI4C,EAvGAC,EAAW,GACX3D,EAAM,GACN4D,EAAe,GACnB,GAAI,EAAE9D,EAAM0D,EAAUtF,KAAK4C,CAAAA,IAGvB,KAAKF,MAAMG,MAAMoB,GAAGjF,KAAK4D,CAFzB,EAAA,MAKJd,EAAMF,EAAI,GACVgB,EAAMA,EAAIkC,UAAUhD,EAAIf,MAAM,EAC9B,IAAI4E,EAAO/D,EAAI,CAAE,EAACjB,MAAM;AAAA,EAAM,CAAE,EAAC,GAAG1B,QAAQ,OAAQN,GAAO,IAAIiH,OAAO,EAAIC,EAAE9E,MAAM,CAC9E+E,EAAAA,EAAWlD,EAAIjC,MAAM;AAAA,EAAM,CAAE,EAAC,GAC9BoF,EAAY,CAACJ,EAAK9E,KAClBmF,EAAAA,EAAS,EAmBb,GAlBI,KAAKvD,QAAQ5E,UACbmI,EAAS,EACTN,EAAeC,EAAKM,UAEfF,GAAAA,EACLC,EAASpE,EAAI,CAAE,EAACb,OAAS,GAIzBiF,GADAA,EAASpE,EAAI,CAAA,EAAGsE,OAAO,SACL,EAAI,EAAIF,EAC1BN,EAAeC,EAAKjE,MAAMsE,CAAAA,EAC1BA,GAAUpE,EAAI,CAAE,EAACb,QAEjBgF,GAAa,OAAO/G,KAAK8G,KACzBhE,GAAOgE,EAAW;AAAA,EAClBlD,EAAMA,EAAIkC,UAAUgB,EAAS/E,OAAS,CACtC0E,EAAAA,EAAW,IAEX,CAACA,EAAU,CACX,IAAMU,EAAsB9H,OAAO,QAAQ+H,KAAKC,IAAI,EAAGL,EAAS,CAAA,CAAA,oDAAuD,EACjHM,EAAcjI,OAAO,QAAQ+H,KAAKC,IAAI,EAAGL,EAAS,CAAA,CAAA,oDAAsD,EACxGO,EAAuBlI,OAAO,QAAQ+H,KAAKC,IAAI,EAAGL,EAAS,CAAG,CAAA,iBAAgB,EAC9EQ,EAAoB,OAAW,QAAQJ,KAAKC,IAAI,EAAGL,EAAS,CAAG,CAAA,IAAG,EAExE,KAAOpD,GAAK,CACR,IAAM6D,EAAU7D,EAAIjC,MAAM;AAAA,EAAM,CAAE,EAAC,CAAE,EAOrC,GANAmF,EAAWW,EAEP,KAAKhE,QAAQ5E,WACbiI,EAAWA,EAAS7G,QAAQ,0BAA2B,IAAA,GAGvDsH,EAAiBvH,KAAK8G,CAAAA,GAItBU,EAAkBxH,KAAK8G,CAIvBK,GAAAA,EAAgBnH,KAAK8G,CAAAA,GAIrBQ,EAAQtH,KAAK4D,CAXb,EAAA,MAcJ,GAAIkD,EAASI,OAAO,MAAA,GAAWF,GAAU,CAACF,EAASjF,KAAI,EACnD6E,GAAgB;AAAA,EAAOI,EAASpE,MAAMsE,OAErC,CAED,GAAID,GAIAJ,EAAKO,OAAO,MAAA,GAAW,GAGvBK,EAAiBvH,KAAK2G,CAAAA,GAGtBa,EAAkBxH,KAAK2G,CAGvBW,GAAAA,EAAQtH,KAAK2G,CAAAA,EAZb,MAeJD,GAAgB;AAAA,EAAOI,CAC1B,CACIC,GAAcD,EAASjF,SACxBkF,EAAY,IAEhBjE,GAAO2E,EAAU;AAAA,EACjB7D,EAAMA,EAAIkC,UAAU2B,EAAQ1F,OAAS,GACrC4E,EAAOG,EAASpE,MAAMsE,EACzB,CACJ,CACG,CAACjB,EAAKK,QAEFG,EACAR,EAAKK,MAAQ,GAER,YAAYpG,KAAK8C,CACtByD,IAAAA,EAAoB,KAG5B,IAAImB,EAAS,KAGT,KAAKjE,QAAQ9E,MACb+I,EAAS,cAAc1G,KAAK0F,CAAY,KAEpCF,EAAYkB,EAAO,CAAE,IAAK,OAC1BhB,EAAeA,EAAazG,QAAQ,eAAgB,KAG5D8F,EAAKM,MAAMnE,KAAK,CACZmB,KAAM,YACNP,IAAAA,EACA6E,KAAM,CAAC,CAACD,EACRE,QAASpB,EACTJ,MAAO,GACPnD,KAAMyD,EACNpD,OAAQ,EAAE,CAC9B,EACgByC,EAAKjD,KAAOA,CACf,CAEDiD,EAAKM,MAAMN,EAAKM,MAAMtE,OAAS,CAAE,EAACe,IAAMiD,EAAKM,MAAMN,EAAKM,MAAMtE,OAAS,GAAGe,IAAI+E,UAC9E9B,EAAKM,MAAMN,EAAKM,MAAMtE,OAAS,CAAE,EAACkB,KAAO8C,EAAKM,MAAMN,EAAKM,MAAMtE,OAAS,GAAGkB,KAAK4E,UAChF9B,EAAKjD,IAAMiD,EAAKjD,IAAI+E,QAAO,EAE3B,QAASjG,EAAI,EAAGA,EAAImE,EAAKM,MAAMtE,OAAQH,IAGnC,GAFA,KAAKmB,MAAMG,MAAMsC,IAAM,GACvBO,EAAKM,MAAMzE,CAAAA,EAAG0B,OAAS,KAAKP,MAAM0C,YAAYM,EAAKM,MAAMzE,GAAGqB,KAAM,CAAA,CAAE,EAChE,CAAC8C,EAAKK,MAAO,CAEb,IAAM0B,EAAU/B,EAAKM,MAAMzE,CAAE,EAAC0B,OAAOyE,OAAOlB,GAAKA,EAAExD,OAAS,OAAL,EACjD2E,EAAwBF,EAAQ/F,OAAS,GAAK+F,EAAQG,KAAKpB,GAAK,SAAS7G,KAAK6G,EAAE/D,GAAG,CACzFiD,EAAAA,EAAKK,MAAQ4B,CAChB,CAGL,GAAIjC,EAAKK,MACL,QAASxE,EAAI,EAAGA,EAAImE,EAAKM,MAAMtE,OAAQH,IACnCmE,EAAKM,MAAMzE,GAAGwE,MAAQ,GAG9B,OAAOL,CACV,CACJ,CACDjG,KAAK8D,EAAK,CACN,IAAMhB,EAAM,KAAKc,MAAMG,MAAM/D,KAAKkB,KAAK4C,CACvC,EAAA,GAAIhB,EAQA,MAPc,CACVS,KAAM,OACNQ,MAAO,GACPf,IAAKF,EAAI,CAAE,EACXsF,IAAKtF,EAAI,KAAJA,OAAoBA,EAAI,CAAE,IAAK,UAAYA,EAAI,CAAE,IAANA,QAChDK,KAAML,EAAI,CAAE,CAC5B,CAGK,CACDuF,IAAIvE,EAAK,CACL,IAAMhB,EAAM,KAAKc,MAAMG,MAAMsE,IAAInH,KAAK4C,GACtC,GAAIhB,EAAK,CACL,IAAMwF,EAAMxF,EAAI,CAAE,EAACyF,YAAcpI,EAAAA,QAAQ,OAAQ,KAC3CY,EAAO+B,EAAI,CAAA,EAAKA,EAAI,CAAE,EAAC3C,QAAQ,WAAY,IAAMA,EAAAA,QAAQ,KAAKyD,MAAMkB,OAAOC,eAAgB,IAAQ,EAAA,GACnG7B,EAAQJ,EAAI,CAAE,EAAGA,EAAI,CAAA,EAAGkD,UAAU,EAAGlD,EAAI,CAAA,EAAGb,OAAS,CAAG9B,EAAAA,QAAQ,KAAKyD,MAAMkB,OAAOC,eAAgB,IAAA,EAAQjC,EAAI,CAAA,EACpH,MAAO,CACHS,KAAM,MACN+E,IAAAA,EACAtF,IAAKF,EAAI,CAAA,EACT/B,KAAAA,EACAmC,MAAAA,CAChB,CACS,CACJ,CACDsF,MAAM1E,EAAK,CACP,IAAMhB,EAAM,KAAKc,MAAMG,MAAMyE,MAAMtH,KAAK4C,CAAAA,EACxC,GAAI,CAAChB,GAGD,CAAC,OAAO5C,KAAK4C,EAAI,CAAE,CAAA,EAFnB,OAMJ,IAAM2F,EAAUtH,GAAW2B,EAAI,CAAA,CAAE,EAC3B4F,EAAS5F,EAAI,CAAA,EAAG3C,QAAQ,aAAc,EAAI0B,EAAAA,MAAM,GAChD8G,EAAAA,EAAO7F,EAAI,IAAMA,EAAI,CAAA,EAAGf,KAAI,EAAKe,EAAI,GAAG3C,QAAQ,YAAa,EAAA,EAAI0B,MAAM;AAAA,CAAA,EAAQ,CAAE,EACjF+G,EAAO,CACTrF,KAAM,QACNP,IAAKF,EAAI,CAAA,EACT+F,OAAQ,GACRC,MAAO,CAAE,EACTH,KAAM,CAAE,CACpB,EACQ,GAAIF,EAAQxG,SAAWyG,EAAOzG,QAI9B,QAAW6G,KAASJ,EACZ,YAAYxI,KAAK4I,GACjBF,EAAKE,MAAM1G,KAAK,OAEX,EAAA,aAAalC,KAAK4I,CAAAA,EACvBF,EAAKE,MAAM1G,KAAK,QAEX,EAAA,YAAYlC,KAAK4I,CAAAA,EACtBF,EAAKE,MAAM1G,KAAK,MAGhBwG,EAAAA,EAAKE,MAAM1G,KAAK,IAAA,EAGxB,QAASN,EAAI,EAAGA,EAAI2G,EAAQxG,OAAQH,IAChC8G,EAAKC,OAAOzG,KAAK,CACbe,KAAMsF,EAAQ3G,CAAAA,EACd0B,OAAQ,KAAKP,MAAM6B,OAAO2D,EAAQ3G,CAAE,CAAA,EACpC+G,OAAQ,GACRC,MAAOF,EAAKE,MAAMhH,CAAAA,CAAE,CACpC,EAEQ,QAAWiH,KAAOJ,EACdC,EAAKD,KAAKvG,KAAKjB,GAAW4H,EAAKH,EAAKC,OAAO5G,MAAM,EAAEsC,IAAI,CAACyE,EAAMlH,KACnD,CACHqB,KAAM6F,EACNxF,OAAQ,KAAKP,MAAM6B,OAAOkE,GAC1BH,OAAQ,GACRC,MAAOF,EAAKE,MAAMhH,CAAE,CACxC,EAGQ,CAAA,EAAA,OAAO8G,CACV,CAAA,CACDK,SAASnF,EAAK,CACV,IAAMhB,EAAM,KAAKc,MAAMG,MAAMkF,SAAS/H,KAAK4C,GAC3C,GAAIhB,EACA,MAAO,CACHS,KAAM,UACNP,IAAKF,EAAI,GACToC,MAAOpC,EAAI,CAAA,EAAGH,OAAO,CAAa,IAA3BG,IAA2B,EAAI,EACtCK,KAAML,EAAI,CAAA,EACVU,OAAQ,KAAKP,MAAM6B,OAAOhC,EAAI,CAAA,CAAE,CAChD,CAEK,CACDoG,UAAUpF,EAAK,CACX,IAAMhB,EAAM,KAAKc,MAAMG,MAAMmF,UAAUhI,KAAK4C,CAAAA,EAC5C,GAAIhB,EAAK,CACL,IAAMK,EAAOL,EAAI,CAAA,EAAGH,OAAOG,EAAI,CAAA,EAAGb,OAAS,CACrCa,IADOA;AAAAA,EACPA,EAAI,CAAA,EAAGF,MAAM,EAAG,EAAA,EAChBE,EAAI,CAAA,EACV,MAAO,CACHS,KAAM,YACNP,IAAKF,EAAI,CAAE,EACXK,KAAAA,EACAK,OAAQ,KAAKP,MAAM6B,OAAO3B,CAAAA,CAC1C,CACS,CACJ,CACDA,KAAKW,EAAK,CACN,IAAMhB,EAAM,KAAKc,MAAMG,MAAMZ,KAAKjC,KAAK4C,CACvC,EAAA,GAAIhB,EACA,MAAO,CACHS,KAAM,OACNP,IAAKF,EAAI,CAAE,EACXK,KAAML,EAAI,CAAE,EACZU,OAAQ,KAAKP,MAAM6B,OAAOhC,EAAI,CAAE,CAAA,CAChD,CAEK,CACDqG,OAAOrF,EAAK,CACR,IAAMhB,EAAM,KAAKc,MAAMkB,OAAOqE,OAAOjI,KAAK4C,CAC1C,EAAA,GAAIhB,EACA,MAAO,CACHS,KAAM,SACNP,IAAKF,EAAI,CAAE,EACXK,KAAMpD,EAAS+C,EAAI,CAAA,CAAE,CACrC,CAEK,CACDwF,IAAIxE,EAAK,CACL,IAAMhB,EAAM,KAAKc,MAAMkB,OAAOwD,IAAIpH,KAAK4C,CACvC,EAAA,GAAIhB,EAaA,MAZI,CAAC,KAAKG,MAAMG,MAAMC,QAAU,QAAQnD,KAAK4C,EAAI,CAAA,CAAE,EAC/C,KAAKG,MAAMG,MAAMC,OAAS,GAErB,KAAKJ,MAAMG,MAAMC,QAAU,UAAUnD,KAAK4C,EAAI,CAAE,CAAA,IACrD,KAAKG,MAAMG,MAAMC,OAAS,IAE1B,CAAC,KAAKJ,MAAMG,MAAMgG,YAAc,iCAAiClJ,KAAK4C,EAAI,EAAE,EAC5E,KAAKG,MAAMG,MAAMgG,WAAa,GAEzB,KAAKnG,MAAMG,MAAMgG,YAAc,mCAAmClJ,KAAK4C,EAAI,CAAA,CAAE,IAClF,KAAKG,MAAMG,MAAMgG,WAAa,IAE3B,CACH7F,KAAM,OACNP,IAAKF,EAAI,CAAE,EACXO,OAAQ,KAAKJ,MAAMG,MAAMC,OACzB+F,WAAY,KAAKnG,MAAMG,MAAMgG,WAC7BrF,MAAO,GACPZ,KAAML,EAAI,CAAA,CAAE,CAGvB,CACDC,KAAKe,EAAK,CACN,IAAMhB,EAAM,KAAKc,MAAMkB,OAAO/B,KAAK7B,KAAK4C,CACxC,EAAA,GAAIhB,EAAK,CACL,IAAMuG,EAAavG,EAAI,CAAE,EAACf,KAAI,EAC9B,GAAI,CAAC,KAAK4B,QAAQ5E,UAAY,KAAKmB,KAAKmJ,CAAa,EAAA,CAEjD,GAAI,CAAE,KAAKnJ,KAAKmJ,CAAAA,EACZ,OAGJ,IAAMC,EAAajH,EAAMgH,EAAWzG,MAAM,EAAG,EAAK,EAAA,IAAA,EAClD,IAAKyG,EAAWpH,OAASqH,EAAWrH,QAAU,GAAM,EAChD,MAEP,KACI,CAED,IAAMsH,EAAiBC,SAvjBX/H,EAAKgI,GAC7B,GAAIhI,EAAIiI,QAsjBsD,GArjB1D,IADsB,GACtB,MAAO,GAEX,IAAIC,EAAQ,EACZ,QAAS7H,EAAI,EAAGA,EAAIL,EAAIQ,OAAQH,IAC5B,GAAIL,EAAIK,KAAO,KACXA,YAEKL,EAAIK,CAAE,IA8iB2C,IA7iBtD6H,YAEKlI,EAAIK,CAAE,IA2iB2C,KAziBlD6H,EAAAA,EAAQ,EACR,OAAO7H,EAInB,MAAO,EACX,EAmiB0DgB,EAAI,CAAA,EAAI,IAAA,EAClD,GAAIyG,EAAiB,GAAI,CAErB,IAAMK,GADQ9G,EAAI,CAAA,EAAG4G,QAAQ,GAAa,IAA5B5G,EAA4B,EAAI,GACtBA,EAAI,CAAA,EAAGb,OAASsH,EACxCzG,EAAI,CAAA,EAAKA,EAAI,CAAE,EAACkD,UAAU,EAAGuD,CAC7BzG,EAAAA,EAAI,CAAE,EAAGA,EAAI,GAAGkD,UAAU,EAAG4D,GAAS7H,KAAI,EAC1Ce,EAAI,GAAK,EACZ,CACJ,CACD,IAAI/B,EAAO+B,EAAI,CAAA,EACXI,EAAQ,GACZ,GAAI,KAAKS,QAAQ5E,SAAU,CAEvB,IAAMgE,EAAO,gCAAgC7B,KAAKH,GAC9CgC,IACAhC,EAAOgC,EAAK,GACZG,EAAQH,EAAK,GAEpB,MAEGG,EAAQJ,EAAI,CAAE,EAAGA,EAAI,GAAGF,MAAM,EAAG,IAAM,GAY3C,OAVA7B,EAAOA,EAAKgB,OACR,KAAK7B,KAAKa,CAAAA,IAGNA,EAFA,KAAK4C,QAAQ5E,UAAY,CAAE,KAAKmB,KAAKmJ,CAE9BtI,EAAAA,EAAK6B,MAAM,CAAA,EAGX7B,EAAK6B,MAAM,EAAG,EAAA,GAGtBC,GAAWC,EAAK,CACnB/B,KAAMA,GAAOA,EAAKZ,QAAQ,KAAKyD,MAAMkB,OAAOC,eAAgB,MAC5D7B,MAAOA,GAAQA,EAAM/C,QAAQ,KAAKyD,MAAMkB,OAAOC,eAAgB,KAClE,EAAEjC,EAAI,GAAI,KAAKG,KAAK,CACxB,CACJ,CACD4G,QAAQ/F,EAAKgG,EAAO,CAChB,IAAIhH,EACJ,IAAKA,EAAM,KAAKc,MAAMkB,OAAO+E,QAAQ3I,KAAK4C,CAAAA,KAClChB,EAAM,KAAKc,MAAMkB,OAAOiF,OAAO7I,KAAK4C,CAAG,GAAI,CAE/C,IAAMf,EAAO+G,GADOhH,EAAI,IAAMA,EAAI,CAAE,GAAE3C,QAAQ,OAAQ,GAAA,EACxBoI,YAAc,CAAA,EAC5C,GAAI,CAACxF,EAAM,CACP,IAAMI,EAAOL,EAAI,CAAE,EAACH,OAAO,GAC3B,MAAO,CACHY,KAAM,OACNP,IAAKG,EACLA,KAAAA,CACpB,CACa,CACD,OAAON,GAAWC,EAAKC,EAAMD,EAAI,CAAA,EAAI,KAAKG,KAAK,CAClD,CACJ,CACD+G,SAASlG,EAAKmG,EAAWC,EAAW,GAAI,CACpC,IAAI3I,EAAQ,KAAKqC,MAAMkB,OAAOqF,eAAejJ,KAAK4C,CAAAA,EAClD,KAAI,CAACvC,GAGDA,EAAM,IAAM2I,EAAS3I,MAAM,oBAG3B,EADaA,EAAM,IAAMA,EAAM,CAAA,IAClB,CAAC2I,GAAY,KAAKtG,MAAMkB,OAAOsF,YAAYlJ,KAAKgJ,CAAAA,GAAW,CAExE,IAAMG,EAAU,CAAA,GAAI9I,EAAM,CAAA,CAAE,EAAEU,OAAS,EACnCqI,EAAQC,EAASC,EAAaH,EAASI,EAAgB,EACrDC,EAASnJ,EAAM,CAAE,EAAC,KAAO,IAAM,KAAKqC,MAAMkB,OAAO6F,kBAAoB,KAAK/G,MAAMkB,OAAO8F,kBAI7F,IAHAF,EAAOG,UAAY,EAEnBZ,EAAYA,EAAUrH,MAAM,GAAKkB,EAAI7B,OAASoI,CACvC,GAAC9I,EAAQmJ,EAAOxJ,KAAK+I,CAAS,IAAM,MAAM,CAE7C,GAAI,EADJK,EAAS/I,EAAM,CAAA,GAAMA,EAAM,CAAE,GAAIA,EAAM,IAAMA,EAAM,CAAA,GAAMA,EAAM,CAAE,GAAIA,EAAM,CAAA,GAEvE,SAEJ,GADAgJ,EAAU,IAAID,CAAO,EAACrI,OAClBV,EAAM,CAAA,GAAMA,EAAM,CAAE,EAAE,CACtBiJ,GAAcD,EACd,QACH,CACI,IAAIhJ,EAAM,CAAE,GAAIA,EAAM,CAAA,IACnB8I,EAAU,GAAK,GAAGA,EAAUE,GAAW,GAAI,CAC3CE,GAAiBF,EACjB,QACH,CAGL,IADAC,GAAcD,GACG,EACb,SAEJA,EAAUjD,KAAKC,IAAIgD,EAASA,EAAUC,EAAaC,GAEnD,IAAMK,EAAiB,CAAIvJ,GAAAA,EAAM,CAAE,CAAA,EAAE,CAAA,EAAGU,OAClCe,EAAMc,EAAIlB,MAAM,EAAGyH,EAAU9I,EAAMwJ,MAAQD,EAAiBP,GAElE,GAAIjD,KAAKC,IAAI8C,EAASE,CAAW,EAAA,EAAG,CAChC,IAAMpH,EAAOH,EAAIJ,MAAM,EAAG,EAAA,EAC1B,MAAO,CACHW,KAAM,KACNP,IAAAA,EACAG,KAAAA,EACAK,OAAQ,KAAKP,MAAMQ,aAAaN,CACxD,CAAA,CACiB,CAED,IAAMA,EAAOH,EAAIJ,MAAM,EAAG,EAAA,EAC1B,MAAO,CACHW,KAAM,SACNP,IAAAA,EACAG,KAAAA,EACAK,OAAQ,KAAKP,MAAMQ,aAAaN,CAAAA,CACpD,CACa,CACJ,CACJ,CACD6H,SAASlH,EAAK,CACV,IAAMhB,EAAM,KAAKc,MAAMkB,OAAOb,KAAK/C,KAAK4C,CACxC,EAAA,GAAIhB,EAAK,CACL,IAAIK,EAAOL,EAAI,GAAG3C,QAAQ,MAAO,KAC3B8K,EAAmB,OAAO/K,KAAKiD,GAC/B+H,EAA0B,KAAKhL,KAAKiD,IAAS,KAAKjD,KAAKiD,CAK7D,EAAA,OAJI8H,GAAoBC,IACpB/H,EAAOA,EAAK6C,UAAU,EAAG7C,EAAKlB,OAAS,CAAC,GAE5CkB,EAAOpD,EAASoD,EAAM,EAAA,EACf,CACHI,KAAM,WACNP,IAAKF,EAAI,CAAE,EACXK,KAAAA,CAChB,CACS,CACJ,CACDgI,GAAGrH,EAAK,CACJ,IAAMhB,EAAM,KAAKc,MAAMkB,OAAOqG,GAAGjK,KAAK4C,CACtC,EAAA,GAAIhB,EACA,MAAO,CACHS,KAAM,KACNP,IAAKF,EAAI,CAAE,CAC3B,CAEK,CACDsI,IAAItH,EAAK,CACL,IAAMhB,EAAM,KAAKc,MAAMkB,OAAOsG,IAAIlK,KAAK4C,GACvC,GAAIhB,EACA,MAAO,CACHS,KAAM,MACNP,IAAKF,EAAI,GACTK,KAAML,EAAI,GACVU,OAAQ,KAAKP,MAAMQ,aAAaX,EAAI,EAAE,CACtD,CAEK,CACDuI,SAASvH,EAAK,CACV,IAAMhB,EAAM,KAAKc,MAAMkB,OAAOuG,SAASnK,KAAK4C,GAC5C,GAAIhB,EAAK,CACL,IAAIK,EAAMpC,EASV,OANIA,EAFA+B,EAAI,CAAE,IAAK,IAEJ,WADPK,EAAOpD,EAAS+C,EAAI,EAAE,GAItBK,EAAOpD,EAAS+C,EAAI,CAAA,CAAE,EAGnB,CACHS,KAAM,OACNP,IAAKF,EAAI,GACTK,KAAAA,EACApC,KAAAA,EACAyC,OAAQ,CACJ,CACID,KAAM,OACNP,IAAKG,EACLA,KAAAA,CACH,CAAA,CACJ,CAER,CACJ,CACDmI,IAAIxH,EAAK,CA14Bb,IAAAyH,EA24BQ,IAAIzI,EACJ,GAAIA,EAAM,KAAKc,MAAMkB,OAAOwG,IAAIpK,KAAK4C,CAAM,EAAA,CACvC,IAAIX,EAAMpC,EACV,GAAI+B,EAAI,CAAE,IAAK,IAEX/B,EAAO,WADPoC,EAAOpD,EAAS+C,EAAI,EAAE,OAGrB,CAED,IAAI0I,EACJ,GACIA,EAAc1I,EAAI,CAAA,EAClBA,EAAI,CAAE,IAAGyI,EAAA,KAAK3H,MAAMkB,OAAO2G,WAAWvK,KAAK4B,EAAI,CAAA,CAAE,IAAxC,YAAAyI,EAA4C,KAAM,SACtDC,IAAgB1I,EAAI,CAAE,GAC/BK,EAAOpD,EAAS+C,EAAI,CAAE,CAAA,EAElB/B,EADA+B,EAAI,CAAA,IAAJA,OACO,UAAYA,EAAI,CAAA,EAGhBA,EAAI,CAAE,CAEpB,CACD,MAAO,CACHS,KAAM,OACNP,IAAKF,EAAI,CAAE,EACXK,KAAAA,EACApC,KAAAA,EACAyC,OAAQ,CACJ,CACID,KAAM,OACNP,IAAKG,EACLA,KAAAA,CACH,CACJ,CACjB,CACS,CACJ,CACDuI,WAAW5H,EAAK,CACZ,IAAMhB,EAAM,KAAKc,MAAMkB,OAAO3B,KAAKjC,KAAK4C,CACxC,EAAA,GAAIhB,EAAK,CACL,IAAIK,EAOJ,OALIA,EADA,KAAKF,MAAMG,MAAMgG,WACVtG,EAAI,CAAE,EAGN/C,EAAS+C,EAAI,CAAE,CAAA,EAEnB,CACHS,KAAM,OACNP,IAAKF,EAAI,CAAE,EACXK,KAAAA,CAChB,CACS,CACJ,CACL,CAQA,IAAMgC,EAAK,qEAELwG,GAAS,wBACT1C,GAAW3I,EAAK,oJACjBH,EAAAA,QAAQ,QAASwL,EAAAA,EACjBxL,QAAQ,aAAc,MACtBA,EAAAA,QAAQ,UAAW,yBACnBA,QAAQ,cAAe,SAAA,EACvBA,QAAQ,WAAY,gBACpBA,QAAQ,QAAS,mBACjBU,EAAAA,SACC+K,EAAAA,EAAa,uFAEbC,EAAc,8BACdxD,GAAM/H,EAAK,mGACZH,QAAQ,QAAS0L,CAAAA,EACjB1L,QAAQ,QAAS,8DACjBU,EAAAA,WACCoF,GAAO3F,EAAK,sCACbH,EAAAA,QAAQ,QAASwL,EAAAA,EACjB9K,SAAQ,EACPiL,EAAO,gWAMPC,EAAW,gCACX/L,GAAOM,EAAK,mdASP,GAAA,EACNH,QAAQ,UAAW4L,GACnB5L,QAAQ,MAAO2L,CAAAA,EACf3L,QAAQ,YAAa,0EACrBU,EAAAA,WACCqI,GAAY5I,EAAKsL,CAClBzL,EAAAA,QAAQ,KAAMgF,CAAAA,EACdhF,QAAQ,UAAW,uBACnBA,EAAAA,QAAQ,YAAa,IACrBA,QAAQ,SAAU,EAAA,EAClBA,QAAQ,aAAc,SACtBA,EAAAA,QAAQ,SAAU,gDAAA,EAClBA,QAAQ,OAAQ,0BAChBA,QAAQ,OAAQ,6DAAA,EAChBA,QAAQ,MAAO2L,CACfjL,EAAAA,WAOCmL,EAAc,CAChB5G,WAPe9E,EAAK,2CACnBH,QAAQ,YAAa+I,EACrBrI,EAAAA,WAMDoD,KA/Dc,uCAgEdoE,IAAAA,GACAlE,OAhEW,8GAiEXa,QA/DY,uCAgEZG,GAAAA,EACAnF,KAAAA,GACAiJ,SAAAA,GACAhD,KAAAA,GACAjC,QAxEY,mBAyEZkF,UAAAA,GACAV,MAAOvH,EACPkC,KA5Dc,SA6DlB,EAIM8I,GAAW3L,EAAK,6JAAA,EAGjBH,QAAQ,KAAMgF,CACdhF,EAAAA,QAAQ,UAAW,yBACnBA,QAAQ,aAAc,SAAA,EACtBA,QAAQ,OAAQ,YAChBA,EAAAA,QAAQ,SAAU,gDAAA,EAClBA,QAAQ,OAAQ,wBAChBA,EAAAA,QAAQ,OAAQ,+DAChBA,QAAQ,MAAO2L,CACfjL,EAAAA,WACCqL,GAAW,CACb,GAAGF,EACHxD,MAAOyD,GACP/C,UAAW5I,EAAKsL,GACXzL,QAAQ,KAAMgF,CAAAA,EACdhF,QAAQ,UAAW,uBACnBA,EAAAA,QAAQ,YAAa,EAAA,EACrBA,QAAQ,QAAS8L,EACjB9L,EAAAA,QAAQ,aAAc,WACtBA,QAAQ,SAAU,gDAAA,EAClBA,QAAQ,OAAQ,0BAChBA,QAAQ,OAAQ,6DAChBA,EAAAA,QAAQ,MAAO2L,GACfjL,SAAQ,CACjB,EAIMsL,GAAgB,CAClB,GAAGH,EACHhM,KAAMM,EAAK,wIAGNH,EAAAA,QAAQ,UAAW4L,GACnB5L,QAAQ,OAAQ,mKAAA,EAIhBU,SACLwH,EAAAA,IAAK,oEACLrD,QAAS,yBACTb,OAAQlD,EACRgI,SAAU,mCACVC,UAAW5I,EAAKsL,CAAAA,EACXzL,QAAQ,KAAMgF,GACdhF,QAAQ,UAAW;AAAA,EAAA,EACnBA,QAAQ,WAAY8I,EACpB9I,EAAAA,QAAQ,SAAU,EAAA,EAClBA,QAAQ,aAAc,SACtBA,EAAAA,QAAQ,UAAW,EAAA,EACnBA,QAAQ,QAAS,EACjBA,EAAAA,QAAQ,QAAS,EAAA,EACjBA,QAAQ,OAAQ,EAChBU,EAAAA,SACT,CAAA,EAIMsI,GAAS,8CAETgC,GAAK,wBAGLiB,EAAe,eACfhC,GAAc9J,EAAK,6BAA8B,GAClDH,EAAAA,QAAQ,eAAgBiM,CAAAA,EAAcvL,SAAQ,EAG7CsJ,GAAiB7J,EAAK,oEAAqE,GAC5FH,EAAAA,QAAQ,SAAUiM,CAAAA,EAClBvL,SAAQ,EACP8J,GAAoBrK,EAAK,wQAOY,IACtCH,EAAAA,QAAQ,SAAUiM,CAAAA,EAClBvL,SAAQ,EAEP+J,GAAoBtK,EAAK,uNAMY,IACtCH,EAAAA,QAAQ,SAAUiM,CAAAA,EAClBvL,SACCkE,EAAAA,GAAiBzE,EAAK,cAAe,IAAA,EACtCH,QAAQ,SAAUiM,CAClBvL,EAAAA,SACCwK,EAAAA,GAAW/K,EAAK,qCACjBH,EAAAA,QAAQ,SAAU,gCAClBA,QAAQ,QAAS,8IAAA,EACjBU,SACCwL,EAAAA,GAAiB/L,EAAKyL,CAAAA,EAAU5L,QAAQ,YAAa,KAAOU,EAAAA,WAC5DyH,GAAMhI,EAAK,0JAMZH,EAAAA,QAAQ,UAAWkM,EAAAA,EACnBlM,QAAQ,YAAa,+EACrBU,SAAQ,EACPyL,EAAe,sDACfvJ,GAAOzC,EAAK,+CAAA,EACbH,QAAQ,QAASmM,CACjBnM,EAAAA,QAAQ,OAAQ,wCAChBA,QAAQ,QAAS,6DAAA,EACjBU,SACCgJ,EAAAA,GAAUvJ,EAAK,yBAAA,EAChBH,QAAQ,QAASmM,CACjBnM,EAAAA,QAAQ,MAAO0L,CAAAA,EACfhL,SAAQ,EACPkJ,GAASzJ,EAAK,uBAAA,EACfH,QAAQ,MAAO0L,GACfhL,SAAQ,EACP0L,GAAgBjM,EAAK,wBAAyB,GAC/CH,EAAAA,QAAQ,UAAW0J,IACnB1J,QAAQ,SAAU4J,EAAAA,EAClBlJ,SAIC2L,EAAAA,EAAe,CACjBf,WAAYxK,EACZ8D,eAAAA,GACAsG,SAAAA,GACAoB,UAjEc,gDAkEdtB,GAAAA,GACAlH,KA3Ee,sCA4EfmH,IAAKnK,EACLkJ,eAAAA,GACAQ,kBAAAA,GACAC,kBAAAA,GACAzB,OAAAA,GACApG,KAAAA,GACAgH,OAAAA,GACAK,YAAAA,GACAP,QAAAA,GACA0C,cAAAA,GACAjE,IAAAA,GACAnF,KArFe,8EAsFfmI,IAAKrK,CACT,EAIMyL,GAAiB,CACnB,GAAGF,EACHzJ,KAAMzC,EAAK,yBACNH,EAAAA,QAAQ,QAASmM,CAAAA,EACjBzL,SAAQ,EACbgJ,QAASvJ,EAAK,+BAAA,EACTH,QAAQ,QAASmM,CACjBzL,EAAAA,UACT,EAIM8L,EAAY,CACd,GAAGH,EACHrD,OAAQ7I,EAAK6I,EAAQhJ,EAAAA,QAAQ,KAAM,QAAQU,SAAQ,EACnDyK,IAAKhL,EAAK,mEAAoE,GACzEH,EAAAA,QAAQ,QAAS,6EACjBU,SAAQ,EACb4K,WAAY,6EACZL,IAAK,+CACLjI,KAAM,4NACV,EAIMyJ,GAAe,CACjB,GAAGD,EACHxB,GAAI7K,EAAK6K,EAAAA,EAAIhL,QAAQ,OAAQ,KAAKU,SAAQ,EAC1CsC,KAAM7C,EAAKqM,EAAUxJ,IAAI,EACpBhD,QAAQ,OAAQ,eAChBA,EAAAA,QAAQ,UAAW,KACnBU,SAAQ,CACjB,EAIMkD,EAAQ,CACV8I,OAAQb,EACRnN,IAAKqN,GACLnN,SAAUoN,EACd,EACMrH,EAAS,CACX+H,OAAQL,EACR3N,IAAK8N,EACLhO,OAAQiO,GACR7N,SAAU2N,EACd,EAKMI,MAAAA,CAAAA,CAMFC,YAAYpJ,EAAS,CALrBH,EAAAA,eACAG,EAAAA,gBACAP,EAAAA,cACAlE,EAAAA,kBACA8N,EAAAA,oBAGI,KAAKxJ,OAAS,CAAE,EAChB,KAAKA,OAAOsG,MAAQmD,OAAOC,OAAO,IAAA,EAClC,KAAKvJ,QAAUA,GAAWvE,EAC1B,KAAKuE,QAAQzE,UAAY,KAAKyE,QAAQzE,WAAa,IAAIwE,EACvD,KAAKxE,UAAY,KAAKyE,QAAQzE,UAC9B,KAAKA,UAAUyE,QAAU,KAAKA,QAC9B,KAAKzE,UAAU+D,MAAQ,KACvB,KAAK+J,YAAc,CAAE,EACrB,KAAK5J,MAAQ,CACTC,OAAQ,GACR+F,WAAY,GACZ1D,IAAK,EACjB,EACQ,IAAM9B,EAAQ,CACVG,MAAOA,EAAM8I,OACb/H,OAAQA,EAAO+H,MAAM,EAErB,KAAKlJ,QAAQ5E,UACb6E,EAAMG,MAAQA,EAAMhF,SACpB6E,EAAMkB,OAASA,EAAO/F,UAEjB,KAAK4E,QAAQ9E,MAClB+E,EAAMG,MAAQA,EAAMlF,IAChB,KAAK8E,QAAQhF,OACbiF,EAAMkB,OAASA,EAAOnG,OAGtBiF,EAAMkB,OAASA,EAAOjG,KAG9B,KAAKK,UAAU0E,MAAQA,CAC1B,CAID,WAAWA,OAAQ,CACf,MAAO,CACHG,MAAAA,EACAe,OAAAA,CACZ,CACK,CAID,OAAOqI,IAAIrJ,EAAKH,EAAS,CAErB,OAAOV,IADW6J,EAAOnJ,CACZwJ,EAAAA,IAAIrJ,CACpB,CAAA,CAID,OAAOsJ,UAAUtJ,EAAKH,EAAS,CAE3B,OAAOV,IADW6J,EAAOnJ,CACZF,EAAAA,aAAaK,CAC7B,CAAA,CAIDqJ,IAAIrJ,EAAK,CACLA,EAAMA,EACD3D,QAAQ,WAAY;AAAA,CAAA,EACzB,KAAKwF,YAAY7B,EAAK,KAAKN,MAAM,EACjC,QAAS1B,EAAI,EAAGA,EAAI,KAAKkL,YAAY/K,OAAQH,IAAK,CAC9C,IAAMuL,EAAO,KAAKL,YAAYlL,GAC9B,KAAK2B,aAAa4J,EAAKvJ,IAAKuJ,EAAK7J,MAAM,CAC1C,CAED,OADA,KAAKwJ,YAAc,CAAE,EACd,KAAKxJ,MAAM,CAEtBmC,YAAY7B,EAAKN,EAAS,CAAA,EAAI8J,EAAuB,GAAO,CAAA,IASpDhK,EACAsC,EACA2H,EACJ,IAVIzJ,EADA,KAAKH,QAAQ5E,SACP+E,EAAI3D,QAAQ,MAAO,QAAQA,QAAQ,SAAU,EAAA,EAG7C2D,EAAI3D,QAAQ,eAAgB,CAACqN,EAAGC,EAASC,IACpCD,EAAU,OAAO3G,OAAO4G,EAAKzL,MAAM,CAAA,EAM3C6B,GACH,GAAI,EAAA,KAAKH,QAAQ/E,YACV,KAAK+E,QAAQ/E,WAAWmF,OACxB,KAAKJ,QAAQ/E,WAAWmF,MAAMoE,KAAKxD,GAClC,CAAA,EAAIrB,EAAQqK,EAAaC,KAAK,CAAE3K,MAAO,IAAI,EAAIa,EAAKN,CAAAA,KAChDM,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,EACpCuB,EAAOpB,KAAKkB,CAAAA,EACL,GAAA,IAOnB,GAAIA,EAAQ,KAAKpE,UAAU2E,MAAMC,CAAAA,EAAM,CACnCA,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,EAChCqB,EAAMN,IAAIf,SAAVqB,GAA0BE,EAAOvB,OAAS,EAG1CuB,EAAOA,EAAOvB,OAAS,GAAGe,KAAO;AAAA,EAGjCQ,EAAOpB,KAAKkB,CAEhB,EAAA,QACH,CAED,GAAIA,EAAQ,KAAKpE,UAAU+E,KAAKH,CAAAA,EAAM,CAClCA,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,GACpC2D,EAAYpC,EAAOA,EAAOvB,OAAS,CAAA,KAEjB2D,EAAUrC,OAAVqC,aAAkCA,EAAUrC,OAAVqC,SAChDA,EAAU5C,KAAO;AAAA,EAAOM,EAAMN,IAC9B4C,EAAUzC,MAAQ;AAAA,EAAOG,EAAMH,KAC/B,KAAK6J,YAAY,KAAKA,YAAY/K,OAAS,GAAG6B,IAAM8B,EAAUzC,MAG9DK,EAAOpB,KAAKkB,GAEhB,QACH,CAED,IAAIA,EAAQ,KAAKpE,UAAUiF,OAAOL,CAAG,KAMjCR,EAAQ,KAAKpE,UAAU8F,QAAQlB,CAAG,KAMlCR,EAAQ,KAAKpE,UAAUiG,GAAGrB,MAM1BR,EAAQ,KAAKpE,UAAUkG,WAAWtB,MAMlCR,EAAQ,KAAKpE,UAAU+G,KAAKnC,MAM5BR,EAAQ,KAAKpE,UAAUc,KAAK8D,IA9BQ,CACpCA,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,EACpCuB,EAAOpB,KAAKkB,CAAAA,EACZ,QACH,CAgCD,GAAIA,EAAQ,KAAKpE,UAAUmJ,IAAIvE,GAAM,CACjCA,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,GACpC2D,EAAYpC,EAAOA,EAAOvB,OAAS,CAAA,KACjB2D,EAAUrC,OAAVqC,aAAkCA,EAAUrC,OAAS,SACnEqC,EAAU5C,KAAO;AAAA,EAAOM,EAAMN,IAC9B4C,EAAUzC,MAAQ;AAAA,EAAOG,EAAMN,IAC/B,KAAKgK,YAAY,KAAKA,YAAY/K,OAAS,CAAA,EAAG6B,IAAM8B,EAAUzC,MAExD,KAAKK,OAAOsG,MAAMxG,EAAMgF,GAAG,IACjC,KAAK9E,OAAOsG,MAAMxG,EAAMgF,GAAG,EAAI,CAC3BvH,KAAMuC,EAAMvC,KACZmC,MAAOI,EAAMJ,KAAK,GAG1B,QACH,CAED,IAAII,EAAQ,KAAKpE,UAAUsJ,MAAM1E,CAAAA,KAM7BR,EAAQ,KAAKpE,UAAU+J,SAASnF,CAAAA,GANG,CACnCA,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,EACpCuB,EAAOpB,KAAKkB,CAAAA,EACZ,QACH,CAUD,GADAiK,EAASzJ,EACL,KAAKH,QAAQ/E,YAAc,KAAK+E,QAAQ/E,WAAWiP,WAAY,CAC/D,IAEIC,EAFAC,EAAaC,IACXC,EAAUnK,EAAIlB,MAAM,CAAA,EAE1B,KAAKe,QAAQ/E,WAAWiP,WAAWK,QAAQrO,GAACsO,CAEpC,OADJL,EAAYK,EAAcP,KAAK,CAAE3K,MAAO,IAAI,EAAIgL,CAAAA,IACvB,UAAYH,GAAa,IAC9CC,EAAazG,KAAKC,IAAIwG,EAAYD,CAAS,EAEnE,CACoBC,EAAAA,EAAaC,KAAYD,GAAc,IACvCR,EAASzJ,EAAIkC,UAAU,EAAG+H,EAAa,GAE9C,CACD,GAAI,KAAK3K,MAAMsC,MAAQpC,EAAQ,KAAKpE,UAAUgK,UAAUqE,IAAU,CAC9D3H,EAAYpC,EAAOA,EAAOvB,OAAS,CAAE,EACjCqL,IAAwB1H,GAAAA,YAAAA,EAAWrC,QAAS,aAC5CqC,EAAU5C,KAAO;AAAA,EAAOM,EAAMN,IAC9B4C,EAAUzC,MAAQ;AAAA,EAAOG,EAAMH,KAC/B,KAAK6J,YAAY9K,MACjB,KAAK8K,YAAY,KAAKA,YAAY/K,OAAS,GAAG6B,IAAM8B,EAAUzC,MAG9DK,EAAOpB,KAAKkB,GAEhBgK,EAAwBC,EAAOtL,SAAW6B,EAAI7B,OAC9C6B,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,EACpC,QACH,CAED,GAAIqB,EAAQ,KAAKpE,UAAUiE,KAAKW,CAAAA,EAAM,CAClCA,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,GACpC2D,EAAYpC,EAAOA,EAAOvB,OAAS,KAClB2D,EAAUrC,OAAVqC,QACbA,EAAU5C,KAAO;AAAA,EAAOM,EAAMN,IAC9B4C,EAAUzC,MAAQ;AAAA,EAAOG,EAAMH,KAC/B,KAAK6J,YAAY9K,IACjB,EAAA,KAAK8K,YAAY,KAAKA,YAAY/K,OAAS,CAAA,EAAG6B,IAAM8B,EAAUzC,MAG9DK,EAAOpB,KAAKkB,CAAAA,EAEhB,QACH,CACD,GAAIQ,EAAK,CACL,IAAMsK,EAAS,0BAA4BtK,EAAIuK,WAAW,CAAA,EAC1D,GAAI,KAAK1K,QAAQ1E,OAAQ,CACrBqP,QAAQC,MAAMH,GACd,KACH,CAEG,MAAUI,MAAMJ,CAEvB,CAAA,CAAA,CAGL,OADA,KAAKhL,MAAMsC,IAAM,GACVlC,CACV,CACDsB,OAAOhB,EAAKN,EAAS,CAAA,EAAI,CAErB,OADA,KAAKwJ,YAAY5K,KAAK,CAAE0B,IAAAA,EAAKN,OAAAA,CAAQ,CAC9BA,EAAAA,CACV,CAIDC,aAAaK,EAAKN,EAAS,CAAE,EAAE,KACvBF,EAAOsC,EAAW2H,EAGlBhM,EACAkN,EAAcvE,EAFdD,EAAYnG,EAIhB,GAAI,KAAKN,OAAOsG,MAAO,CACnB,IAAMA,EAAQmD,OAAOyB,KAAK,KAAKlL,OAAOsG,KAAK,EAC3C,GAAIA,EAAM7H,OAAS,EACf,MAAQV,EAAQ,KAAKrC,UAAU0E,MAAMkB,OAAOyH,cAAcrL,KAAK+I,KAAe,MACtEH,EAAM6E,SAASpN,EAAM,CAAA,EAAGqB,MAAMrB,EAAM,CAAE,EAACqN,YAAY,GAAA,EAAO,EAAG,EAC7D3E,CAAAA,IAAAA,EAAYA,EAAUrH,MAAM,EAAGrB,EAAMwJ,KAAK,EAAI,IAAM,IAAIjE,OAAOvF,EAAM,CAAA,EAAGU,OAAS,CAAK,EAAA,IAAMgI,EAAUrH,MAAM,KAAK1D,UAAU0E,MAAMkB,OAAOyH,cAAc1B,SAAS,EAI9K,CAED,MAAQtJ,EAAQ,KAAKrC,UAAU0E,MAAMkB,OAAO2H,UAAUvL,KAAK+I,CAAS,IAA7D,MACHA,EAAYA,EAAUrH,MAAM,EAAGrB,EAAMwJ,KAAK,EAAI,IAAM,IAAIjE,OAAOvF,EAAM,CAAE,EAACU,OAAS,CAAA,EAAK,IAAMgI,EAAUrH,MAAM,KAAK1D,UAAU0E,MAAMkB,OAAO2H,UAAU5B,SAAS,EAG/J,MAAQtJ,EAAQ,KAAKrC,UAAU0E,MAAMkB,OAAOC,eAAe7D,KAAK+I,KAAe,MAC3EA,EAAYA,EAAUrH,MAAM,EAAGrB,EAAMwJ,KAAK,EAAI,KAAOd,EAAUrH,MAAM,KAAK1D,UAAU0E,MAAMkB,OAAOC,eAAe8F,SAAS,EAE7H,KAAO/G,GAMH,GALK2K,IACDvE,EAAW,IAEfuE,EAAe,KAEX,KAAK9K,QAAQ/E,YACV,KAAK+E,QAAQ/E,WAAWkG,QACxB,KAAKnB,QAAQ/E,WAAWkG,OAAOqD,KAAKvG,GACnC,CAAA,EAAI0B,EAAQqK,EAAaC,KAAK,CAAE3K,MAAO,IAAI,EAAIa,EAAKN,CAAAA,KAChDM,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,EACpCuB,EAAOpB,KAAKkB,CACL,EAAA,MAOnB,CAAA,GAAIA,EAAQ,KAAKpE,UAAUiK,OAAOrF,CAAAA,EAAM,CACpCA,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,EACpCuB,EAAOpB,KAAKkB,GACZ,QACH,CAED,GAAIA,EAAQ,KAAKpE,UAAUoJ,IAAIxE,CAAM,EAAA,CACjCA,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,GACpC2D,EAAYpC,EAAOA,EAAOvB,OAAS,CAAE,IACpBqB,EAAMC,OAAS,QAAUqC,EAAUrC,OAAS,QACzDqC,EAAU5C,KAAOM,EAAMN,IACvB4C,EAAUzC,MAAQG,EAAMH,MAGxBK,EAAOpB,KAAKkB,CAAAA,EAEhB,QACH,CAED,GAAIA,EAAQ,KAAKpE,UAAU6D,KAAKe,CAAAA,EAAM,CAClCA,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,EACpCuB,EAAOpB,KAAKkB,CACZ,EAAA,QACH,CAED,GAAIA,EAAQ,KAAKpE,UAAU2K,QAAQ/F,EAAK,KAAKN,OAAOsG,KAAK,EAAG,CACxDhG,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,GACpC2D,EAAYpC,EAAOA,EAAOvB,OAAS,CAAE,IACpBqB,EAAMC,OAAND,QAAyBsC,EAAUrC,OAAVqC,QACtCA,EAAU5C,KAAOM,EAAMN,IACvB4C,EAAUzC,MAAQG,EAAMH,MAGxBK,EAAOpB,KAAKkB,GAEhB,QACH,CAED,IAAIA,EAAQ,KAAKpE,UAAU8K,SAASlG,EAAKmG,EAAWC,CAAAA,KAMhD5G,EAAQ,KAAKpE,UAAU8L,SAASlH,CAAG,KAMnCR,EAAQ,KAAKpE,UAAUiM,GAAGrH,CAAG,KAM7BR,EAAQ,KAAKpE,UAAUkM,IAAItH,CAAAA,KAM3BR,EAAQ,KAAKpE,UAAUmM,SAASvH,CAAAA,IAMhC,CAAC,KAAKV,MAAMC,SAAWC,EAAQ,KAAKpE,UAAUoM,IAAIxH,CAAAA,GA9BS,CAC3DA,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,EACpCuB,EAAOpB,KAAKkB,CACZ,EAAA,QACH,CAkCD,GADAiK,EAASzJ,EACL,KAAKH,QAAQ/E,YAAc,KAAK+E,QAAQ/E,WAAWiQ,YAAa,CAChE,IAEIf,EAFAC,EAAaC,IACXC,EAAUnK,EAAIlB,MAAM,CAAA,EAE1B,KAAKe,QAAQ/E,WAAWiQ,YAAYX,QAASC,GAEhB,CAArB,OADJL,EAAYK,EAAcP,KAAK,CAAE3K,MAAO,IAAI,EAAIgL,CAAO,IAC9B,UAAYH,GAAa,IAC9CC,EAAazG,KAAKC,IAAIwG,EAAYD,CAAS,EAEnE,CACoBC,EAAAA,EAAaC,KAAYD,GAAc,IACvCR,EAASzJ,EAAIkC,UAAU,EAAG+H,EAAa,CAAA,EAE9C,CACD,GAAIzK,EAAQ,KAAKpE,UAAUwM,WAAW6B,GAAS,CAC3CzJ,EAAMA,EAAIkC,UAAU1C,EAAMN,IAAIf,MAAM,EAChCqB,EAAMN,IAAIJ,MAAM,EAChBsH,IADwB,MACxBA,EAAW5G,EAAMN,IAAIJ,MAAM,EAAA,GAE/B6L,EAAe,IACf7I,EAAYpC,EAAOA,EAAOvB,OAAS,CAAE,IACpB2D,EAAUrC,OAAS,QAChCqC,EAAU5C,KAAOM,EAAMN,IACvB4C,EAAUzC,MAAQG,EAAMH,MAGxBK,EAAOpB,KAAKkB,CAAAA,EAEhB,QACH,CACD,GAAIQ,EAAK,CACL,IAAMsK,EAAS,0BAA4BtK,EAAIuK,WAAW,GAC1D,GAAI,KAAK1K,QAAQ1E,OAAQ,CACrBqP,QAAQC,MAAMH,CAAAA,EACd,KACH,CAEG,MAAM,MAAUA,CAEvB,CAAA,CAAA,CAEL,OAAO5K,CACV,CACL,CAKA,MAAMsL,EAGUnL,YAAAA,EAAS,CAFrBA,EAAAA,gBACAoL,EAAAA,eAEI,KAAKpL,QAAUA,GAAWvE,CAC7B,CACDyE,MAAMP,EAAO,CACT,MAAO,EACV,CACDW,KAAK,CAAEd,KAAAA,EAAM0B,KAAAA,EAAMnD,QAAAA,CAAO,EAAI,CA3pDlC,IAAA6J,EA4pDQ,IAAMyD,GAAcnK,GAAAA,GAAQ,IAAItD,MAAM,UAAlBsD,YAAAA,EAA4B,GAC1CZ,EAAOd,EAAKhD,QAAQ,MAAO,EAAM,EAAA;AAAA,EAAA,OACvCyB,EAKO,8BACD7B,EAASiP,CAAAA,EACT,MACCtN,EAAUuC,EAAOlE,EAASkE,EAAM,EAAA,GACjC;AAAA,EARK,eACAvC,EAAUuC,EAAOlE,EAASkE,EAAM,EAAI,GACrC;AAAA,CAOb,CACDmB,WAAW,CAAE5B,OAAAA,CAAM,EAAI,CAEnB,MAAO;AAAA,EADM,KAAKuL,OAAOE,MAAMzL,CAAAA,CACF;AAAA,CAAgB,CAEjDxD,KAAK,CAAEmD,KAAAA,CAAI,EAAI,CACX,OAAOA,CACV,CACD6B,QAAQ,CAAExB,OAAAA,EAAQ0B,MAAAA,CAAK,EAAI,CACvB,MAAO,KAAKA,KAAS,KAAK6J,OAAOG,YAAY1L,CAAQ,CAAA,MAAK0B,CAAM;AAAA,CACnE,CACDC,GAAG7B,EAAO,CACN,MAAO;AAAA,CACV,CACD2C,KAAK3C,EAAO,CACR,IAAM8C,EAAU9C,EAAM8C,QAChBC,EAAQ/C,EAAM+C,MAChB8I,EAAO,GACX,QAASC,EAAI,EAAGA,EAAI9L,EAAMiD,MAAMtE,OAAQmN,IAAK,CACzC,IAAMxG,EAAOtF,EAAMiD,MAAM6I,GACzBD,GAAQ,KAAKE,SAASzG,CACzB,CAAA,CACD,IAAMrF,EAAO6C,EAAU,KAAO,KAE9B,MAAO,IAAM7C,GADK,GAAY8C,IAAAA,EAAgB,WAAaA,EAAQ,IAAO,IAC1C;AAAA,EAAQ8I,EAAO,KAAO5L,EAAO;AAAA,CAChE,CACD8L,SAASzG,EAAM,CACX,IAAI0G,EAAW,GACf,GAAI1G,EAAKf,KAAM,CACX,IAAM0H,EAAW,KAAKA,SAAS,CAAEzH,QAAS,CAAC,CAACc,EAAKd,OAAO,GACpDc,EAAKtC,MACDsC,EAAKpF,OAAOvB,OAAS,GAAK2G,EAAKpF,OAAO,CAAE,EAACD,OAAfqF,aAC1BA,EAAKpF,OAAO,CAAE,EAACL,KAAOoM,EAAW,IAAM3G,EAAKpF,OAAO,CAAE,EAACL,KAClDyF,EAAKpF,OAAO,CAAA,EAAGA,QAAUoF,EAAKpF,OAAO,CAAA,EAAGA,OAAOvB,OAAS,GAAK2G,EAAKpF,OAAO,GAAGA,OAAO,CAAA,EAAGD,OAAS,SAC/FqF,EAAKpF,OAAO,CAAA,EAAGA,OAAO,CAAE,EAACL,KAAOoM,EAAW,IAAM3G,EAAKpF,OAAO,CAAE,EAACA,OAAO,GAAGL,OAI9EyF,EAAKpF,OAAOgM,QAAQ,CAChBjM,KAAM,OACNP,IAAKuM,EAAW,IAChBpM,KAAMoM,EAAW,GACzC,CAAA,EAIgBD,GAAYC,EAAW,GAE9B,CAED,OADAD,GAAY,KAAKP,OAAOE,MAAMrG,EAAKpF,OAAQ,CAAC,CAACoF,EAAKtC,KAAK,EAChD,OAAOgJ,CAAS;AAAA,CAAQ,CAEnCC,SAAS,CAAEzH,QAAAA,CAAO,EAAI,CAClB,MAAO,WACAA,EAAU,cAAgB,IAC3B,8BACT,CACDoB,UAAU,CAAE1F,OAAAA,CAAM,EAAI,CAClB,MAAO,MAAM,KAAKuL,OAAOG,YAAY1L,CAAQ,CAAA;AAAA,CAChD,CACDgF,MAAMlF,EAAO,CACT,IAAIuF,EAAS,GAETG,EAAO,GACX,QAASoG,EAAI,EAAGA,EAAI9L,EAAMuF,OAAO5G,OAAQmN,IACrCpG,GAAQ,KAAKyG,UAAUnM,EAAMuF,OAAOuG,CAAAA,CAAE,EAE1CvG,GAAU,KAAK6G,SAAS,CAAEvM,KAAM6F,CAAM,CAAA,EACtC,IAAImG,EAAO,GACX,QAASC,EAAI,EAAGA,EAAI9L,EAAMqF,KAAK1G,OAAQmN,IAAK,CACxC,IAAMrG,EAAMzF,EAAMqF,KAAKyG,CAAAA,EACvBpG,EAAO,GACP,QAAS2G,EAAI,EAAGA,EAAI5G,EAAI9G,OAAQ0N,IAC5B3G,GAAQ,KAAKyG,UAAU1G,EAAI4G,CAAAA,CAAE,EAEjCR,GAAQ,KAAKO,SAAS,CAAEvM,KAAM6F,CAAM,CACvC,CAAA,CAGD,OAFImG,IACAA,EAAO,UAAUA,CAAAA,YACd;AAAA;AAAA,EAEDtG,EACA;AAAA,EACAsG,EACA;AAAA,CACT,CACDO,SAAS,CAAEvM,KAAAA,CAAI,EAAI,CACf,MAAO;AAAA,EAASA,CAAK;AAAA,CACxB,CACDsM,UAAUnM,EAAO,CACb,IAAMsM,EAAU,KAAKb,OAAOG,YAAY5L,EAAME,MAAM,EAC9CD,EAAOD,EAAMuF,OAAS,KAAO,KAInC,OAHYvF,EAAMwF,MACZ,IAAIvF,CAAAA,WAAeD,EAAMwF,KAAK,KAC9B,IAAIvF,CAAAA,KACGqM,EAAU,KAAKrM,CAAK;AAAA,CACpC,CAIDsM,OAAO,CAAErM,OAAAA,CAAM,EAAI,CACf,MAAO,WAAW,KAAKuL,OAAOG,YAAY1L,CAAQ,CAAA,WACrD,CACDsM,GAAG,CAAEtM,OAAAA,CAAM,EAAI,CACX,MAAO,OAAO,KAAKuL,OAAOG,YAAY1L,SAAc,CAExDwH,SAAS,CAAE7H,KAAAA,CAAI,EAAI,CACf,MAAO,SAASA,UAAa,CAEjCgI,GAAG7H,EAAO,CACN,MAAO,MACV,CACD8H,IAAI,CAAE5H,OAAAA,CAAM,EAAI,CACZ,MAAO,QAAQ,KAAKuL,OAAOG,YAAY1L,UAAe,CAE1DT,KAAK,CAAEhC,KAAAA,EAAMmC,MAAAA,EAAOM,OAAAA,CAAM,EAAI,CAC1B,IAAML,EAAO,KAAK4L,OAAOG,YAAY1L,CAC/BuM,EAAAA,EAAYjP,GAASC,CAC3B,EAAA,GAAIgP,IAAAA,KACA,OAAO5M,EAGX,IAAI6M,EAAM,aADVjP,EAAOgP,GACwB,IAK/B,OAJI7M,IACA8M,GAAO,WAAa9M,EAAQ,KAEhC8M,GAAO,IAAM7M,EAAO,MAEvB,CACD8M,MAAM,CAAElP,KAAAA,EAAMmC,MAAAA,EAAOC,KAAAA,CAAI,EAAI,CACzB,IAAM4M,EAAYjP,GAASC,GAC3B,GAAIgP,IAAc,KACd,OAAO5M,EAEXpC,EAAOgP,EACP,IAAIC,EAAM,aAAajP,CAAK,UAASoC,CAAK,IAK1C,OAJID,IACA8M,GAAO,WAAW9M,CAAAA,KAEtB8M,GAAO,GAEV,CACD7M,KAAKG,EAAO,CACR,MAAO,WAAYA,GAASA,EAAME,OAAS,KAAKuL,OAAOG,YAAY5L,EAAME,MAAM,EAAIF,EAAMH,IAAI,CAErG,CAMA,MAAM+M,CAEFL,CAAAA,OAAO,CAAE1M,KAAAA,CAAI,EAAI,CACb,OAAOA,CACV,CACD2M,GAAG,CAAE3M,KAAAA,CAAI,EAAI,CACT,OAAOA,CACV,CACD6H,SAAS,CAAE7H,KAAAA,CAAI,EAAI,CACf,OAAOA,CACV,CACDiI,IAAI,CAAEjI,KAAAA,CAAI,EAAI,CACV,OAAOA,CACV,CACDnD,KAAK,CAAEmD,KAAAA,CAAI,EAAI,CACX,OAAOA,CACV,CACDA,KAAK,CAAEA,KAAAA,CAAI,EAAI,CACX,OAAOA,CACV,CACDJ,KAAK,CAAEI,KAAAA,CAAI,EAAI,CACX,MAAO,GAAKA,CACf,CACD8M,MAAM,CAAE9M,KAAAA,CAAI,EAAI,CACZ,MAAO,GAAKA,CACf,CACDgI,IAAK,CACD,MAAO,EACV,CACL,CAKA,MAAMgF,CAAAA,CAIFpD,YAAYpJ,EAAS,CAHrBA,EAAAA,gBACA3E,EAAAA,iBACAoR,EAAAA,qBAEI,KAAKzM,QAAUA,GAAWvE,EAC1B,KAAKuE,QAAQ3E,SAAW,KAAK2E,QAAQ3E,UAAY,IAAI8P,EACrD,KAAK9P,SAAW,KAAK2E,QAAQ3E,SAC7B,KAAKA,SAAS2E,QAAU,KAAKA,QAC7B,KAAK3E,SAAS+P,OAAS,KACvB,KAAKqB,aAAe,IAAIF,CAC3B,CAID,OAAOjB,MAAMzL,EAAQG,EAAS,CAE1B,OADe,IAAIwM,EAAQxM,CACbsL,EAAAA,MAAMzL,CACvB,CAAA,CAID,OAAO0L,YAAY1L,EAAQG,EAAS,CAEhC,OAAOoL,IADYoB,EAAQxM,CACbuL,EAAAA,YAAY1L,CAC7B,CAAA,CAIDyL,MAAMzL,EAAQkC,EAAM,GAAM,CACtB,IAAIsK,EAAM,GACV,QAASlO,EAAI,EAAGA,EAAI0B,EAAOvB,OAAQH,IAAK,CACpC,IAAMuO,EAAW7M,EAAO1B,GAExB,GAAI,KAAK6B,QAAQ/E,YAAc,KAAK+E,QAAQ/E,WAAW0R,WAAa,KAAK3M,QAAQ/E,WAAW0R,UAAUD,EAAS9M,IAAI,EAAG,CAElH,IAAMgN,EAAM,KAAK5M,QAAQ/E,WAAW0R,UAAUE,EAAajN,IAAI,EAAEqK,KAAK,CAAEmB,OAAQ,IAAI,EAD/DsB,CAAAA,EAErB,GAAIE,IAAQ,IAAS,CAAC,CAAC,QAAS,KAAM,UAAW,OAAQ,QAAS,aAAc,OAAQ,OAAQ,YAAa,MAAA,EAAQ5B,SAAS6B,EAAajN,IAAI,EAAG,CAC9IyM,GAAOO,GAAO,GACd,QACH,CACJ,CAED,OAAQjN,EAAMC,MACV,IAAK,QACDyM,GAAO,KAAKhR,SAAS6E,MAHfwM,GAIN,SAEJ,IAAK,KACDL,GAAO,KAAKhR,SAASmG,GAPfkL,CAQN,EAAA,aAEC,UACDL,GAAO,KAAKhR,SAASgG,QAXfqL,CAAAA,EAYN,SAEC,IAAA,OACDL,GAAO,KAAKhR,SAASiF,KAffoM,CAgBN,EAAA,aAEC,QACDL,GAAO,KAAKhR,SAASwJ,MAnBf6H,CAoBN,EAAA,SAEC,IAAA,aACDL,GAAO,KAAKhR,SAASoG,WAvBfiL,CAwBN,EAAA,SAEC,IAAA,OACDL,GAAO,KAAKhR,SAASiH,KA3BfoK,CAAAA,EA4BN,SAEC,IAAA,OACDL,GAAO,KAAKhR,SAASgB,KA/BfqQ,GAgCN,SAEJ,IAAK,YACDL,GAAO,KAAKhR,SAASkK,UAnCfmH,CAAAA,EAoCN,SAEC,IAAA,OAAQ,CACT,IAAII,EAvCEJ,EAwCFlB,EAAO,KAAKnQ,SAASmE,KAAKsN,CAC9B,EAAA,KAAO3O,EAAI,EAAI0B,EAAOvB,QAAUuB,EAAO1B,EAAI,CAAE,EAACyB,OAAS,QACnDkN,EAAYjN,EAAO,EAAE1B,CAAAA,EACrBqN,GAAQ;AAAA,EAAO,KAAKnQ,SAASmE,KAAKsN,GAElC/K,EACAsK,GAAO,KAAKhR,SAASkK,UAAU,CAC3B3F,KAAM,YACNP,IAAKmM,EACLhM,KAAMgM,EACN3L,OAAQ,CAAC,CAAED,KAAM,OAAQP,IAAKmM,EAAMhM,KAAMgM,EAAO,CAC7E,CAGwBa,EAAAA,GAAOb,EAEX,QACH,CACD,QAAS,CACL,IAAMf,EAAS,eA3DTiC,EA2DgC9M,KAAO,wBAC7C,GAAI,KAAKI,QAAQ1E,OAEb,OADAqP,QAAQC,MAAMH,CAAAA,EACP,GAGD,MAAII,MAAMJ,CAEvB,CAAA,CACJ,CACJ,CACD,OAAO4B,CACV,CAIDd,YAAY1L,EAAQxE,EAAU,CAC1BA,EAAWA,GAAY,KAAKA,SAC5B,IAAIgR,EAAM,GACV,QAASlO,EAAI,EAAGA,EAAI0B,EAAOvB,OAAQH,IAAK,CACpC,IAAMuO,EAAW7M,EAAO1B,CAAE,EAE1B,GAAI,KAAK6B,QAAQ/E,YAAc,KAAK+E,QAAQ/E,WAAW0R,WAAa,KAAK3M,QAAQ/E,WAAW0R,UAAUD,EAAS9M,IAAI,EAAG,CAClH,IAAMgN,EAAM,KAAK5M,QAAQ/E,WAAW0R,UAAUD,EAAS9M,IAAI,EAAEqK,KAAK,CAAEmB,OAAQ,IAAM,EAAEsB,CACpF,EAAA,GAAIE,IAAAA,IAAiB,CAAC,CAAC,SAAU,OAAQ,OAAQ,QAAS,SAAU,KAAM,WAAY,KAAM,MAAO,QAAQ5B,SAAS0B,EAAS9M,IAAI,EAAG,CAChIyM,GAAOO,GAAO,GACd,QACH,CACJ,CAED,OADcF,EACA9M,KAAI,CACd,IAAK,SAoCL,IAAK,OAnCDyM,GAAOhR,EAASmE,KAHVkN,CAAAA,EAIN,MAEJ,IAAK,OACDL,GAAOhR,EAASgB,KAPVqQ,GAQN,MAEJ,IAAK,OACDL,GAAOhR,EAAS+D,KAXVsN,CAAAA,EAYN,MAEC,IAAA,QACDL,GAAOhR,EAASiR,MAfVI,CAgBN,EAAA,MAEC,IAAA,SACDL,GAAOhR,EAAS6Q,OAnBVQ,CAAAA,EAoBN,MAEC,IAAA,KACDL,GAAOhR,EAAS8Q,GAvBVO,CAAAA,EAwBN,MAEJ,IAAK,WACDL,GAAOhR,EAASgM,SA3BVqF,CAAAA,EA4BN,MAEC,IAAA,KACDL,GAAOhR,EAASmM,GA/BVkF,GAgCN,MAEJ,IAAK,MACDL,GAAOhR,EAASoM,IAnCViF,CAAAA,EAoCN,MAMK,QAAA,CACL,IAAMjC,EAAS,eAAiB9K,EAAMC,KAAO,wBAC7C,GAAI,KAAKI,QAAQ1E,OAEb,OADAqP,QAAQC,MAAMH,GACP,GAGP,MAAM,MAAUA,CAEvB,CAAA,CACJ,CACJ,CACD,OAAO4B,CACV,CACL,CAEA,MAAMU,CACF/M,CACAoJ,YAAYpJ,EAAS,CADrBA,EAAAA,gBAEI,KAAKA,QAAUA,GAAWvE,CAC7B,CASDuR,WAAWC,EAAU,CACjB,OAAOA,CACV,CAIDC,YAAY7Q,EAAM,CACd,OAAOA,CACV,CAID8Q,iBAAiBtN,EAAQ,CACrB,OAAOA,CACV,CACL,CAvBIuN,EALEL,EAKKM,mBAAmB,IAAIC,IAAI,CAC9B,aACA,cACA,mBACH,GAtiEL,IAAAC,EAAAC,GAAAC,EAAAC,GA2jEA,MAAMC,EACFC,CAUY,eAAGC,EAAM,CAXzBC,EAAA,KAAAP,GACIK,EAAAA,gBAAW9S,KACXkF,EAAAA,eAAU,KAAK+N,YACfzC,EAAAA,aAAQ0C,EAAA,KAAKT,EAAAE,GAAL,UAAoBtE,EAAOK,IAAKgD,EAAQlB,QAChDC,EAAAA,mBAAcyC,EAAA,KAAKT,EAAAE,GAAL,UAAoBtE,EAAOM,UAAW+C,EAAQjB,cAC5D0C,EAAAA,cAASzB,GACT0B,EAAAA,gBAAW/C,GACXgD,EAAAA,oBAAe5B,GACf6B,EAAAA,aAAQjF,GACRkF,EAAAA,iBAAYtO,GACZuO,EAAAA,aAAQvB,GAEJ,KAAKwB,OAAOV,CACf,CAAA,CAIDrS,WAAWqE,EAAQ2O,EAAU,CA5kEjC,IAAA5G,EAAA6G,EA6kEQ,IAAIC,EAAS,CAAE,EACf,QAAW/O,KAASE,EAEhB,OADA6O,EAASA,EAAOC,OAAOH,EAASvE,KAAK,KAAMtK,CACnCA,CAAAA,EAAAA,EAAMC,KACV,CAAA,IAAK,QAED,QAAWyF,KADQ1F,EACWuF,OAC1BwJ,EAASA,EAAOC,OAAO,KAAKnT,WAAW6J,EAAKxF,OAAQ2O,IAExD,QAAWpJ,KAAOwJ,EAAW5J,KACzB,QAAWK,KAAQD,EACfsJ,EAASA,EAAOC,OAAO,KAAKnT,WAAW6J,EAAKxF,OAAQ2O,CAAAA,CAAAA,EAG5D,MAEJ,IAAK,OAEDE,EAASA,EAAOC,OAAO,KAAKnT,WAAWqT,EAAUjM,MAAO4L,IACxD,MAEJ,QAAS,CACL,IAAM3B,EAAelN,GACjB8O,GAAA7G,EAAA,KAAKgG,SAAS3S,aAAd,YAAA2M,EAA0BkH,cAA1B,MAAAL,EAAwC5B,EAAajN,MACrD,KAAKgO,SAAS3S,WAAW6T,YAAYjC,EAAajN,IAAI,EAAE2K,QAAQtM,GAAC6Q,CAC7D,IAAMjP,EAASgN,EAAaiC,CAAAA,EAAaC,KAAK1E,KAC9CqE,EAASA,EAAOC,OAAO,KAAKnT,WAAWqE,EAAQ2O,GAC3E,CAE6B3B,EAAAA,EAAahN,SAClB6O,EAASA,EAAOC,OAAO,KAAKnT,WAAWqR,EAAahN,OAAQ2O,CAAAA,CAAAA,EAEnE,CACJ,CAEL,OAAOE,CACV,CACDH,OAAOV,EAAM,CACT,IAAM5S,EAAa,KAAK2S,SAAS3S,YAAc,CAAE0R,UAAW,CAAE,EAAEmC,YAAa,CAAA,GA4K7E,OA3KAjB,EAAKtD,QAASyE,IAEV,IAAMC,EAAO,CAAE,GAAGD,CAAI,EA8DtB,GA5DAC,EAAKlU,MAAQ,KAAK6S,SAAS7S,OAASkU,EAAKlU,OAAS,GAE9CiU,EAAK/T,aACL+T,EAAK/T,WAAWsP,QAAQrO,GAACgT,CACrB,GAAI,CAACA,EAAInS,KACL,MAAM,MAAU,2BAEpB,GAAI,aAAcmS,EAAK,CACnB,IAAMC,EAAelU,EAAW0R,UAAUuC,EAAInS,IAAI,EAC9CoS,EAEAlU,EAAW0R,UAAUuC,EAAInS,IAAI,EAAI,YAAa8Q,GAC1C,IAAIjB,EAAMsC,EAAI7T,SAAS+T,MAAM,KAAMvB,GAInC,OAHIjB,IAAQ,KACRA,EAAMuC,EAAaC,MAAM,KAAMvB,CAAAA,GAE5BjB,CACvC,EAG4B3R,EAAW0R,UAAUuC,EAAInS,IAAI,EAAImS,EAAI7T,QAE5C,CACD,GAAI,cAAe6T,EAAK,CACpB,GAAI,CAACA,EAAIlJ,OAAUkJ,EAAIlJ,QAAJkJ,SAAyBA,EAAIlJ,QAAJkJ,SACxC,MAAUrE,MAAM,6CAEpB,EAAA,IAAMwE,EAAWpU,EAAWiU,EAAIlJ,KAAK,EACjCqJ,EACAA,EAASxD,QAAQqD,EAAI3T,SAAS,EAG9BN,EAAWiU,EAAIlJ,KAAK,EAAI,CAACkJ,EAAI3T,SAAS,EAEtC2T,EAAIxM,QACAwM,EAAIlJ,QAAU,QACV/K,EAAWiP,WACXjP,EAAWiP,WAAWzL,KAAKyQ,EAAIxM,KAAK,EAGpCzH,EAAWiP,WAAa,CAACgF,EAAIxM,KAAK,EAGjCwM,EAAIlJ,QAAU,WACf/K,EAAWiQ,YACXjQ,EAAWiQ,YAAYzM,KAAKyQ,EAAIxM,KAAK,EAGrCzH,EAAWiQ,YAAc,CAACgE,EAAIxM,KAAK,GAIlD,CACG,gBAAiBwM,GAAOA,EAAIJ,cAC5B7T,EAAW6T,YAAYI,EAAInS,IAAI,EAAImS,EAAIJ,YAE/D,CAAA,EACgBG,EAAKhU,WAAaA,GAGlB+T,EAAK3T,SAAU,CACf,IAAMA,EAAW,KAAKuS,SAASvS,UAAY,IAAI8P,EAAU,KAAKyC,QAAQ,EACtE,QAAW0B,KAAQN,EAAK3T,SAAU,CAC9B,GAAI,EAAEiU,KAAQjU,GACV,MAAM,MAAU,aAAaiU,CAAAA,kBAAsB,EAEvD,GAAI,CAAC,UAAW,UAAUtE,SAASsE,CAAAA,EAE/B,SAEJ,IAAMC,EAAeD,EACjBE,EAAeR,EAAK3T,SAASkU,GAC3BJ,EAAe9T,EAASkU,CAAa,EAE3ClU,EAASkU,GAAgB,IAAI1B,IACpBmB,CAAAA,EAAKS,iBAEND,EAAexB,EAAA,KAAKT,EAAAC,IAAL,UAA8BgC,EAAcD,EAAclU,IAE7E,IAAIuR,EAAM4C,EAAaJ,MAAM/T,EAAUwS,GAIvC,OAHIjB,IAAQ,KACRA,EAAMuC,EAAaC,MAAM/T,EAAUwS,CAAI,GAEpCjB,GAAO,EACtC,CACiB,CACDqC,EAAK5T,SAAWA,CACnB,CACD,GAAI2T,EAAKzT,UAAW,CAChB,IAAMA,EAAY,KAAKqS,SAASrS,WAAa,IAAIwE,EAAW,KAAK6N,QAAQ,EACzE,QAAW0B,KAAQN,EAAKzT,UAAW,CAC/B,GAAI,EAAE+T,KAAQ/T,GACV,MAAM,MAAU,cAAc+T,CAAAA,kBAAsB,EAExD,GAAI,CAAC,UAAW,QAAS,OAAQ,EAACtE,SAASsE,CAAAA,EAEvC,SAGJ,IAAMI,EAAgBV,EAAKzT,UADL+T,GAEhBK,EAAgBpU,EAFA+T,CAEwB,EAG9C/T,EALsB+T,GAKK,IAAIzB,IAC3B,CAAA,IAAIjB,EAAM8C,EAAcN,MAAM7T,EAAWsS,CAAAA,EAIzC,OAHIjB,IAAQ,KACRA,EAAM+C,EAAcP,MAAM7T,EAAWsS,IAElCjB,CAC/B,CACiB,CACDqC,EAAK1T,UAAYA,CACpB,CAED,GAAIyT,EAAK7T,MAAO,CACZ,IAAMA,EAAQ,KAAKyS,SAASzS,OAAS,IAAI4R,EACzC,QAAWuC,KAAQN,EAAK7T,MAAO,CAC3B,GAAI,EAAEmU,KAAQnU,GACV,MAAM,MAAU,SAASmU,mBAAsB,EAEnD,GAAIA,IAAAA,UAEA,SAGJ,IAAMM,EAAYZ,EAAK7T,MADLmU,CACqB,EACjCO,EAAW1U,EAFCmU,CAAAA,EAGdvC,EAAOM,iBAAiByC,IAAIR,GAE5BnU,EALcmU,CAKE,EAAGpT,GAAC6T,CAChB,GAAI,KAAKnC,SAAS7S,MACd,OAAOiV,QAAQC,QAAQL,EAAU3F,KAAK9O,EAAO4U,IAAMG,KAAKtD,GAC7CiD,EAAS5F,KAAK9O,EAAOyR,CAGpC,CAAA,EAAA,IAAMA,EAAMgD,EAAU3F,KAAK9O,EAAO4U,CAAAA,EAClC,OAAOF,EAAS5F,KAAK9O,EAAOyR,CACxD,CAAA,EAIwBzR,EAjBcmU,CAAAA,EAiBK,IAAIzB,KACnB,IAAIjB,EAAMgD,EAAUR,MAAMjU,EAAO0S,GAIjC,OAHIjB,IAAQ,KACRA,EAAMiD,EAAST,MAAMjU,EAAO0S,CAAAA,GAEzBjB,CACnC,CAEiB,CACDqC,EAAK9T,MAAQA,CAChB,CAED,GAAI6T,EAAKxT,WAAY,CACjB,IAAMA,EAAa,KAAKoS,SAASpS,WAC3B2U,EAAiBnB,EAAKxT,WAC5ByT,EAAKzT,WAAa,SAAUmE,EACxB,CAAA,IAAI+O,EAAS,CAAA,EAKb,OAJAA,EAAOjQ,KAAK0R,EAAelG,KAAK,KAAMtK,CAAAA,CAAAA,EAClCnE,IACAkT,EAASA,EAAOC,OAAOnT,EAAWyO,KAAK,KAAMtK,CAAAA,CAAAA,GAE1C+O,CAC3B,CACa,CACD,KAAKd,SAAW,CAAE,GAAG,KAAKA,SAAU,GAAGqB,EACnD,CACe,EAAA,IAAI,CAmNflB,WAAWlR,EAAK,CAEZ,OADA,KAAK+Q,SAAW,CAAE,GAAG,KAAKA,SAAU,GAAG/Q,GAChC,IAAI,CAEfyC,MAAMa,EAAKH,EAAS,CAChB,OAAOmJ,EAAOK,IAAIrJ,EAAKH,GAAW,KAAK4N,QAAQ,CAClD,CACDxC,OAAOvL,EAAQG,EAAS,CACpB,OAAOwM,EAAQlB,MAAMzL,EAAQG,GAAW,KAAK4N,QAAQ,CACxD,CAyEL,CAzgBAL,EAAA,YAuOIC,GAAwB,SAAC4C,EAAMd,EAAMjU,GACjC,OAAQiU,EAAAA,CACJ,IAAK,UACD,OAAO,SAAU3P,EAAK,CAAA,OAClB1B,EAAW2B,MAAQD,EAAMC,OAAS0P,EAK3Bc,EAAKnG,KAAK,KAAM5O,EAAS+P,OAAOG,YAAY5L,EAAME,MAAM,EAAGF,EAAM4B,MAzvEjFlF,EAyvE0G+O,OAAOG,YAAY5L,EAAME,OAAQxE,EAAS+P,OAAOqB,YAAY,EAzvElKjQ,QAAQC,GAAc,CAACoN,EAAG7I,KAClCA,EAAIA,EAAE4D,iBACN,QACW,IACP5D,EAAEhC,OAAO,KAATgC,IACOA,EAAEhC,OAAO,CAAA,IAATgC,IACDqP,OAAOC,aAAaC,SAASvP,EAAEqB,UAAU,CAAI,EAAA,EAAA,CAAA,EAC7CgO,OAAOC,aAAa,CAACtP,EAAEqB,UAAU,IAEpC,EA8uEgB+N,CAAAA,EAAAA,EAAKhB,MAAM,KAAMoB,SAAAA,CAGhD,EACY,IAAK,OACD,OAAO,SAAU7Q,EACb,CAAA,OAAI,EAAOC,MAAQD,EAAMC,OAAS0P,EAK3Bc,EAAKnG,KAAK,KAAMtK,EAAMH,KAAMG,EAAMuB,KAAM,CAAC,CAACvB,EAAM5B,OAAO,EAFnDqS,EAAKhB,MAAM,KAAMoB,SAGhD,CAAA,MACiB,QACD,OAAO,SAAU7Q,EAAK,CAClB,GAAI,CAACA,EAAMC,MAAQD,EAAMC,OAAS0P,EAG9B,OAAOc,EAAKhB,MAAM,KAAMoB,SAAAA,EAE5B,IAAItL,EAAS,GAETG,EAAO,GACX,QAASoG,EAAI,EAAGA,EAAI9L,EAAMuF,OAAO5G,OAAQmN,IACrCpG,GAAQ,KAAKyG,UAAU,CACnBtM,KAAMG,EAAMuF,OAAOuG,CAAAA,EAAGjM,KACtBK,OAAQF,EAAMuF,OAAOuG,CAAAA,EAAG5L,OACxBqF,OAAQ,GACRC,MAAOxF,EAAMwF,MAAMsG,EAAE,CACjD,EAEoBvG,GAAU,KAAK6G,SAAS,CAAEvM,KAAM6F,CAAM,CAAA,EACtC,IAAImG,EAAO,GACX,QAASC,EAAI,EAAGA,EAAI9L,EAAMqF,KAAK1G,OAAQmN,IAAK,CACxC,IAAMrG,EAAMzF,EAAMqF,KAAKyG,CAAAA,EACvBpG,EAAO,GACP,QAAS2G,EAAI,EAAGA,EAAI5G,EAAI9G,OAAQ0N,IAC5B3G,GAAQ,KAAKyG,UAAU,CACnBtM,KAAM4F,EAAI4G,GAAGxM,KACbK,OAAQuF,EAAI4G,CAAE,EAACnM,OACfqF,OAAQ,GACRC,MAAOxF,EAAMwF,MAAM6G,CAAAA,CAAE,CAG7BR,EAAAA,GAAQ,KAAKO,SAAS,CAAEvM,KAAM6F,CAAM,CAAA,CACvC,CACD,OAAO+K,EAAKnG,KAAK,KAAM/E,EAAQsG,EACnD,EACY,IAAK,aACD,OAAO,SAAU7L,GACb,GAAI,CAACA,EAAMC,MAAQD,EAAMC,OAAS0P,EAG9B,OAAOc,EAAKhB,MAAM,KAAMoB,SAE5B,EAAA,IAAMhF,EAAO,KAAKJ,OAAOE,MAAM3L,EAAME,MAAM,EAC3C,OAAOuQ,EAAKnG,KAAK,KAAMuB,EAC3C,EACY,IAAK,OACD,OAAO,SAAU7L,EACb,CAAA,GAAI,CAACA,EAAMC,MAAQD,EAAMC,OAAS0P,EAG9B,OAAOc,EAAKhB,MAAM,KAAMoB,SAE5B,EAAA,IAAM/N,EAAU9C,EAAM8C,QAChBC,EAAQ/C,EAAM+C,MACdC,EAAQhD,EAAMgD,MAChB6I,EAAO,GACX,QAASC,EAAI,EAAGA,EAAI9L,EAAMiD,MAAMtE,OAAQmN,IAAK,CACzC,IAAMxG,EAAOtF,EAAMiD,MAAM6I,CAAAA,EACnBtH,EAAUc,EAAKd,QACfD,EAAOe,EAAKf,KACdyH,EAAW,GACf,GAAI1G,EAAKf,KAAM,CACX,IAAM0H,EAAW,KAAKA,SAAS,CAAEzH,QAAS,CAAC,CAACA,CAAO,CAAA,EAC/CxB,EACIsC,EAAKpF,OAAOvB,OAAS,GAAK2G,EAAKpF,OAAO,CAAA,EAAGD,OAAfqF,aAC1BA,EAAKpF,OAAO,CAAA,EAAGL,KAAOoM,EAAW,IAAM3G,EAAKpF,OAAO,CAAA,EAAGL,KAClDyF,EAAKpF,OAAO,CAAA,EAAGA,QAAUoF,EAAKpF,OAAO,GAAGA,OAAOvB,OAAS,GAAK2G,EAAKpF,OAAO,CAAE,EAACA,OAAO,GAAGD,OAAzBqF,SAC7DA,EAAKpF,OAAO,CAAA,EAAGA,OAAO,CAAA,EAAGL,KAAOoM,EAAW,IAAM3G,EAAKpF,OAAO,CAAA,EAAGA,OAAO,CAAA,EAAGL,OAI9EyF,EAAKpF,OAAOgM,QAAQ,CAChBjM,KAAM,OACNJ,KAAMoM,EAAW,GACzD,GAIgCD,GAAYC,EAAW,GAE9B,CACDD,GAAY,KAAKP,OAAOE,MAAMrG,EAAKpF,OAAQ8C,CAAAA,EAC3C6I,GAAQ,KAAKE,SAAS,CAClB9L,KAAM,YACNP,IAAKsM,EACLnM,KAAMmM,EACNzH,KAAAA,EACAC,QAAS,CAAC,CAACA,EACXxB,MAAAA,EACA9C,OAAQoF,EAAKpF,MAAM,CAC/C,CACqB,CACD,OAAOuQ,EAAKnG,KAAK,KAAMuB,EAAM/I,EAASC,EAC1D,EACY,IAAK,OACD,OAAO,SAAU/C,EAAK,CAAA,OACbA,EAAMC,MAAQD,EAAMC,OAAS0P,EAK3Bc,EAAKnG,KAAK,KAAMtK,EAAMH,KAAMG,EAAMS,KAAK,EAFnCgQ,EAAKhB,MAAM,KAAMoB,SAAAA,CAGhD,EACY,IAAK,YAoCL,IAAK,SA2BL,IAAK,MAlBL,IAAK,KA5CD,OAAO,SAAU7Q,EACb,CAAA,OAAI,EAAOC,MAAQD,EAAMC,OAAS0P,EAK3Bc,EAAKnG,KAAK,KAAM,KAAKmB,OAAOG,YAAY5L,EAAME,MAAM,CAAA,EAFhDuQ,EAAKhB,MAAM,KAAMoB,SAGhD,CAAA,MACiB,SA+DL,IAAK,OAlBL,IAAK,WA5CD,OAAO,SAAU7Q,EAAK,CAAA,OAClB,EAAWC,MAAQD,EAAMC,OAAS0P,EAK3Bc,EAAKnG,KAAK,KAAMtK,EAAMH,IAAI,EAFtB4Q,EAAKhB,MAAM,KAAMoB,SAAAA,CAGhD,EACY,IAAK,OACD,OAAO,SAAU7Q,EACb,CAAA,OAAI,EAAOC,MAAQD,EAAMC,OAAS0P,EAK3Bc,EAAKnG,KAAK,KAAMtK,EAAMvC,KAAMuC,EAAMJ,MAAO,KAAK6L,OAAOG,YAAY5L,EAAME,MAAM,CAFzEuQ,EAAAA,EAAKhB,MAAM,KAAMoB,SAGhD,CAAA,MACiB,QACD,OAAO,SAAU7Q,EAAK,CAAA,OAClB,EAAWC,MAAQD,EAAMC,OAAS0P,EAK3Bc,EAAKnG,KAAK,KAAMtK,EAAMvC,KAAMuC,EAAMJ,MAAOI,EAAMH,IAAI,EAF/C4Q,EAAKhB,MAAM,KAAMoB,SAAAA,CAGhD,CA+CS,CACD,OAAOJ,CACV,EAWD3C,EAAc,SAACnO,EAAO8L,EAClB,CAAA,MAAO,CAACjL,EAAKH,IAAAA,CACT,IAAMyQ,EAAU,CAAE,GAAGzQ,CAAO,EACtBnD,EAAM,CAAE,GAAG,KAAK+Q,SAAU,GAAG6C,CAAO,EAEtC,KAAK7C,SAAS7S,QAAU,IAAQ0V,EAAQ1V,QAAR0V,KAC3B5T,EAAIvB,QACLqP,QAAQ+F,KAAK,oHAAA,EAEjB7T,EAAI9B,MAAQ,IAEhB,IAAM4V,EAAa3C,EAAA,KAAKT,EAAAG,IAAL,UAAc,CAAC,CAAC7Q,EAAIvB,OAAQ,CAAC,CAACuB,EAAI9B,OAErD,GAAWoF,GAAP,KACA,OAAOwQ,EAAW,MAAU,mDAEhC,GAAI,OAAOxQ,GAAQ,SACf,OAAOwQ,EAAe9F,MAAM,wCACtBvB,OAAOsH,UAAUC,SAAS5G,KAAK9J,CAAAA,EAAO,sBAKhD,GAHItD,EAAI1B,QACJ0B,EAAI1B,MAAM6E,QAAUnD,GAEpBA,EAAI9B,MACJ,OAAOiV,QAAQC,QAAQpT,EAAI1B,MAAQ0B,EAAI1B,MAAM6R,WAAW7M,GAAOA,CAC1D+P,EAAAA,KAAK/P,GAAOb,EAAMa,EAAKtD,CACvBqT,CAAAA,EAAAA,KAAKrQ,GAAUhD,EAAI1B,MAAQ0B,EAAI1B,MAAMgS,iBAAiBtN,GAAUA,CAChEqQ,EAAAA,KAAKrQ,GAAUhD,EAAIrB,WAAawU,QAAQc,IAAI,KAAKtV,WAAWqE,EAAQhD,EAAIrB,UAAU,CAAG0U,EAAAA,KAAK,IAAMrQ,GAAUA,CAC1GqQ,EAAAA,KAAKrQ,GAAUuL,EAAOvL,EAAQhD,CAC9BqT,CAAAA,EAAAA,KAAK7T,GAAQQ,EAAI1B,MAAQ0B,EAAI1B,MAAM+R,YAAY7Q,GAAQA,CACvD0U,EAAAA,MAAMJ,CAAAA,EAEf,GAAI,CACI9T,EAAI1B,QACJgF,EAAMtD,EAAI1B,MAAM6R,WAAW7M,CAAG,GAElC,IAAIN,EAASP,EAAMa,EAAKtD,CACpBA,EAAAA,EAAI1B,QACJ0E,EAAShD,EAAI1B,MAAMgS,iBAAiBtN,IAEpChD,EAAIrB,YACJ,KAAKA,WAAWqE,EAAQhD,EAAIrB,UAAU,EAE1C,IAAIa,EAAO+O,EAAOvL,EAAQhD,CAI1B,EAAA,OAHIA,EAAI1B,QACJkB,EAAOQ,EAAI1B,MAAM+R,YAAY7Q,IAE1BA,CACV,OACMH,EAAG,CACN,OAAOyU,EAAWzU,EACrB,CACb,CACK,EACDwR,GAAQ,SAACpS,EAAQP,GACb,OAAQmB,IAEJ,GADAA,EAAE8U,SAAW;AAAA,2DACT1V,EAAQ,CACR,IAAM2V,EAAM,iCACN7U,EAASF,EAAE8U,QAAU,GAAI,EACzB,EAAA,SAAA,OACN,EACWhB,QAAQC,QAAQgB,CAEpBA,EAAAA,CACV,CACD,GAAIlW,EACA,OAAOiV,QAAQkB,OAAOhV,CAE1B,EAAA,MAAMA,CAClB,CACK,EAGL,IAAMiV,EAAiB,IAAIxD,GAC3B,SAASyD,EAAOjR,EAAKtD,GACjB,OAAOsU,EAAe7F,MAAMnL,EAAKtD,EACrC,CAMAuU,EAAOpR,QACHoR,EAAOrD,WAAa,SAAU/N,EAI1B,CAAA,OAHAmR,EAAepD,WAAW/N,CAC1BoR,EAAAA,EAAOxD,SAAWuD,EAAevD,SAlkFrCnS,EAmkFmB2V,EAAOxD,SACfwD,CACf,EAIAA,EAAOC,YAAcvW,EACrBsW,EAAOxD,SAAWnS,EAIlB2V,EAAO7C,IAAM,YAAaV,EAItB,CAAA,OAHAsD,EAAe5C,IAAG,GAAIV,GACtBuD,EAAOxD,SAAWuD,EAAevD,SAhlFjCnS,EAilFe2V,EAAOxD,SACfwD,CACX,EAIAA,EAAO5V,WAAa,SAAUqE,EAAQ2O,EAAQ,CAC1C,OAAO2C,EAAe3V,WAAWqE,EAAQ2O,EAC7C,EAQA4C,EAAO7F,YAAc4F,EAAe5F,YAIpC6F,EAAOnD,OAASzB,EAChB4E,EAAOhG,OAASoB,EAAQlB,MACxB8F,EAAOlD,SAAW/C,EAClBiG,EAAOjD,aAAe5B,EACtB6E,EAAOhD,MAAQjF,EACfiI,EAAO9R,MAAQ6J,EAAOK,IACtB4H,EAAO/C,UAAYtO,EACnBqR,EAAO9C,MAAQvB,EACfqE,EAAO9F,MAAQ8F,EACCA,EAAOpR,QACJoR,EAAOrD,WACdqD,EAAO7C,IACA6C,EAAO5V,WACN4V,EAAO7F,YAEZiB,EAAQlB,MACTnC,EAAOK","x_google_ignoreList":[0]}